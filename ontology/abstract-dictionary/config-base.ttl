@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix cfg: <http://semantic-machines.com/veda/config/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .

@prefix cfgb: <http://semantic-machines.com/veda/config-base/> .
<http://semantic-machines.com/veda/config-base>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология Веда. Обработчики событий"@ru ;
  rdfs:label "Veda ontology. Event handlers"@en ;
#  owl:versionInfo "1.0" ;
  v-s:loadPriority 3;
.

cfg:Event_0
  rdf:type v-s:Event1 ;
  v-s:runAt "V8.LowPriority" ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "test event";
  rdfs:comment "test event";
  v-s:script """
var res = query (ticket, "'rdf:type' == 'v-s:Event'");
log_trace("res=", res);
  """ ;
.

cfg:Event_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  v-s:preventByType v-s:Version;
  rdfs:label "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  rdfs:comment "Скрипт помещает все индивиды в группу cfg:TTLResourcesGroup" ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

var doc_uri = document['@'],
  isDefinedBy = document['rdfs:isDefinedBy'],
  isGroup = veda.Util.getUri(document['rdf:type']) === "v-s:Group";
  isConnection = veda.Util.getUri(document['rdf:type']) === "v-s:Connection";
if ( !isDefinedBy || isGroup || isConnection) return;
var uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + 'cfg_TTLResourcesGroup',
  membership = {
    '@' : uri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri('cfg:TTLResourcesGroup'),
    'v-s:resource' : veda.Util.newUri(doc_uri),
    'rdfs:comment' : veda.Util.newStr('создано автоматически в обработчике cfg:Event_1')
  };
put_individual(ticket, membership, _event_id);
//log_trace(uri);

  """ ;
.

cfg:Event_2
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  rdfs:comment "Скрипт выдает права авторам (v-s:author), владельцам (v-s:owner), издателям (v-s:publisher) и создателям (v-s:creator)";
  v-s:preventByType v-s:Version;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

var doc_uri = document['@'],
    owner_properties = ["v-s:owner", "v-s:author", "v-s:publisher", "v-s:creator"];

owner_properties.map(function (property_uri) {
  var owner_uri = veda.Util.getUri( document[property_uri] );
  if (owner_uri && owner_uri !== "cfg:VedaSystem") {
    var owner = get_individual(ticket, owner_uri);
    if (owner) {
      var owner_type = veda.Util.getUri(owner["rdf:type"]);
      if (owner_type === "v-s:Person" || owner_type === "v-s:Position") {
        var permission_uri = "d:right_" + doc_uri.split(':').join('_') + "_" + owner_uri.split(':').join('_') + "_event2";
        addPermission(permission_uri, owner_uri, doc_uri, ["v-s:canRead", "v-s:canUpdate", "v-s:canDelete"]);
      } else if (owner_type === "v-s:Appointment") {
        var position_uri = veda.Util.getUri(owner["v-s:occupation"]);
        if (position_uri) {
          var permission_uri = "d:right_" + doc_uri.split(':').join('_') + "_" + position_uri.split(':').join('_') + "_event2";
          addPermission(permission_uri, position_uri, doc_uri, ["v-s:canRead", "v-s:canUpdate", "v-s:canDelete"]);
        }
        var person_uri = veda.Util.getUri(owner["v-s:employee"]);
        if (person_uri) {
          var permission_uri = "d:right_" + doc_uri.split(':').join('_') + "_" + person_uri.split(':').join('_') + "_event2";
          addPermission(permission_uri, person_uri, doc_uri, ["v-s:canRead", "v-s:canUpdate", "v-s:canDelete"]);
        }
      }
    }
  }
});

function addPermission(permission_uri, subject_uri, object_uri, rights) {
  var permission = {
    '@': permission_uri,
    'rdf:type': veda.Util.newUri('v-s:PermissionStatement'),
    'v-s:permissionObject': veda.Util.newUri(object_uri),
    'v-s:permissionSubject': veda.Util.newUri(subject_uri)
  };
  rights.map(function (right) {
    permission[right] = veda.Util.newBool(true);
  });
  put_individual(ticket, permission);
}
  """ ;
.

cfg:Event_3
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт создает журнал документа" ;
  rdfs:comment "Скрипт создает журнал документа" ;
  v-s:preventByType v-s:Version;
  v-s:triggerByType v-s:Journaling, v-s:AutomaticallyVersioned ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

var isAdmin = (user_uri === "cfg:Administrator" || user_uri === "cfg:VedaSystem");

// Get latest document state
document = get_individual(ticket, document["@"]);

if (super_classes.indexOf("v-s:AutomaticallyVersioned") >= 0 && !isAdmin) {
  veda.Util.create_version(ticket, document, prev_state, user_uri, _event_id);
}

if (super_classes.indexOf("v-s:Journaling") >= 0) {
  var publisher_uri = veda.Util.getUri(document["v-s:creator"]);
  if (!publisher_uri) { return; }

  var publisher = get_individual(ticket, publisher_uri);
  if (!publisher) { return; }

  var employee_uri;
  if ( veda.Util.hasValue(publisher, "rdf:type", {data: "v-s:Appointment", type: "Uri"}) ) {
    employee_uri = publisher["v-s:employee"];
    if (!employee_uri) { return; }
  } else {
    employee_uri = publisher_uri;
  }

  if (!employee_uri) { return; }

  var journal_uri = veda.Util.getJournalUri(document["@"]);
  var exist_journal = get_individual(ticket, journal_uri);

  var user = get_individual(ticket, user_uri);

  var actor_uri = veda.Util.hasValue(user, "v-s:defaultAppointment") ? veda.Util.getUri(user["v-s:defaultAppointment"]) :
                  veda.Util.hasValue(user, "v-s:hasAppointment") ? veda.Util.getUri(user["v-s:hasAppointment"]) :
                  user_uri;

  var actor = veda.Util.newUri(actor_uri);

  if (exist_journal && isAdmin) {
    return;
  } else if (exist_journal && !isAdmin) {
    // UPDATE DOCUMENT
    var journal_record = veda.Util.newJournalRecord(journal_uri);
    if ( document["v-s:actualVersion"] && document["v-s:actualVersion"][0].data == document["@"] ) {
      journal_record["v-s:documentVersion"] = document["v-s:previousVersion"];
    }
    if (
      (!prev_state["v-s:deleted"] || prev_state["v-s:deleted"].data === false) &&
      (document["v-s:deleted"] && document["v-s:deleted"].data === true)
    ) {
      journal_record['rdf:type'] = [{
        data: 'v-s:DocumentDeleted',
        type: "Uri"
      }];
    } else {
      journal_record['rdf:type'] = [{
        data: 'v-s:DocumentUpdated',
        type: "Uri"
      }];
    }
    journal_record['v-s:actor'] = actor;
    veda.Util.logToJournal(ticket, journal_uri, journal_record);
    veda.Util.addRight(ticket, 'cfg:AllUsersGroup', journal_record['@'], ["v-s:canRead"]);
  } else {
    // CREATE DOCUMENT
    var new_journal = {
      '@': journal_uri,
      'rdf:type': [{
        data: 'v-s:Journal',
        type: "Uri"
      }],
      'v-s:onDocument': [{
        data: document['@'],
        type: "Uri"
      }],
      'v-s:actor': actor
    };
    put_individual(ticket, new_journal, _event_id);

    veda.Util.addRight(ticket, 'cfg:AllUsersGroup', journal_uri, ["v-s:canRead"]);

    var journal_record = veda.Util.newJournalRecord(new_journal['@']);
    if (document['v-s:actualVersion'] && document['v-s:actualVersion'][0].data == document['@']) {
      journal_record['v-s:documentVersion'] = document['v-s:previousVersion'];
    }
    journal_record['rdf:type'] = [{
      data: 'v-s:DocumentCreated',
      type: "Uri"
    }];
    journal_record['v-s:actor'] = actor;
    veda.Util.logToJournal(ticket, journal_uri, journal_record);
    veda.Util.addRight(ticket, 'cfg:AllUsersGroup', journal_record['@'], ["v-s:canRead"]);
  }
}
  """ ;
.

cfg:Event_4
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает персону в группу должности" ;
  rdfs:comment "Скрипт включает персону в группу должности при сохранении назначения. Если назначение удаляется, включение персоны в группу должности также удаляется." ;
  v-s:triggerByType v-s:Appointment ;
  v-s:preventByType v-s:Version ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

var doc_uri = document["@"],
    deleted = veda.Util.hasValue(document, "v-s:deleted", { data: true, type: "Boolean" }),
    person_uri = veda.Util.getUri(document["v-s:employee"]),
    position_uri = veda.Util.getUri(document["v-s:occupation"]);

if (!person_uri || !position_uri) return;

var membership_uri = "d:membership_" + person_uri.split(":").join("_") + "_" + position_uri.split(":").join("_");

if (deleted) {
  remove_individual(ticket, membership_uri);
} else {
  var membership = {
    "@" : membership_uri,
    "rdf:type"     : veda.Util.newUri("v-s:Membership"),
    "v-s:resource" : veda.Util.newUri(person_uri),
    "v-s:memberOf" : veda.Util.newUri(position_uri),
    "rdfs:comment" : veda.Util.newStr("создано автоматически в обработчике cfg:Event_4"),
  };
  if (veda.Util.getUri(document["v-s:hasDelegationPurpose"]) === "d:delegate_Control") {
    membership["v-s:canRead"] = veda.Util.newBool(true);
  }
  if ( veda.Util.hasValue(document, "v-s:official", {data: true, type: "Boolean"}) ) {
    membership["v-s:official"] = document["v-s:official"];
  }
  if ( veda.Util.hasValue(document, "v-s:ignoreExclusive", {data: true, type: "Boolean"}) ) {
    membership["v-s:ignoreExclusive"] = document["v-s:ignoreExclusive"];
  }
  put_individual (ticket, membership);
}
  """ ;
.

cfg:Event_5
  v-s:disabled true ;
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  rdfs:comment "Скрипт включает персону (кроме cfg:Guest) в группу cfg:AllUsersGroup." ;
  v-s:triggerByType v-s:Person ;
  v-s:preventByType v-s:Version;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

var doc_uri = document["@"],
    deleted = veda.Util.hasValue(document, "v-s:deleted", { data: true, type: "Boolean"}),
    uri = "d:membership_" + doc_uri.split(":").join("_") + "_" + "cfg_AllUsersGroup",
    membership;

if (doc_uri === "cfg:Guest") { return; }

// Manage accounts (delete or restore)
var accounts_uris = veda.Util.getUris(document["v-s:hasAccount"]);
accounts_uris.map(function (account_uri) {
  var account = get_individual(ticket, account_uri);
  if (account) {
    var account_deleted = veda.Util.hasValue(account, "v-s:deleted", { data: true, type: "Boolean"});
    if (deleted !== account_deleted) {
      account["v-s:deleted"] = veda.Util.newBool( deleted );
      put_individual (ticket, account, _event_id);
    }
  }
});

// Manage membership (delete or restore)
membership = get_individual(ticket, uri);

if (!membership) {
  membership = {
    "@" : uri,
    "rdf:type"     : veda.Util.newUri("v-s:Membership"),
    "v-s:resource" : veda.Util.newUri(doc_uri),
    "v-s:memberOf" : veda.Util.newUri("cfg:AllUsersGroup"),
    "rdfs:comment" : veda.Util.newStr("выдан cfg:Event_5"),
    "v-s:deleted"  : veda.Util.newBool( deleted )
  };
  put_individual (ticket, membership, _event_id);
  return;
}

var membership_deleted = veda.Util.hasValue(membership, "v-s:deleted", { data: true, type: "Boolean"});
if (deleted !== membership_deleted) {
  membership["v-s:deleted"] = veda.Util.newBool( deleted );
  put_individual (ticket, membership, _event_id);
}
  """ ;
.

cfg:Event_6
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  rdfs:comment "Скрипт включает индивид онтологии и UI настроек в группу cfg:OntologyGroup." ;
  v-s:triggerByType owl:Ontology ;
  v-s:triggerByType rdfs:Datatype ;
  v-s:triggerByType rdfs:Class ;
  v-s:triggerByType owl:Class ;
  v-s:triggerByType rdf:Property ;
  v-s:triggerByType owl:DatatypeProperty ;
  v-s:triggerByType owl:ObjectProperty ;
  v-s:triggerByType owl:OntologyProperty ;
  v-s:triggerByType owl:AnnotationProperty ;
  v-s:triggerByType v-ui:PropertySpecification ;
  v-s:triggerByType v-ui:DatatypePropertySpecification ;
  v-s:triggerByType v-ui:ObjectPropertySpecification ;
  v-s:triggerByType v-ui:ClassTemplate ;
  v-s:triggerByType v-ui:ClassModel ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

// Update ontology vsn
var vsn = {
  "@" : "cfg:OntoVsn",
  "rdf:type"  : veda.Util.newUri("rdfs:Resource"),
  "rdf:value" : veda.Util.newStr( veda.Util.guid() )
};
put_individual (ticket, vsn, _event_id);

// Add to cfg:OntologyGroup
var doc_uri = document['@'],
    uri = "d:membership_" + doc_uri.split(":").join("_") + "_cfg_OntologyGroup",
    membership = get_individual(ticket, uri);

if (membership) { return; }

membership = {
  '@' : uri,
  'rdf:type'     : veda.Util.newUri('v-s:Membership'),
  'v-s:memberOf' : veda.Util.newUri('cfg:OntologyGroup'),
  'v-s:resource' : veda.Util.newUri(doc_uri),
  'rdfs:comment' : veda.Util.newStr('выдан cfg:Event_6')
};
put_individual (ticket, membership, _event_id);
  """ ;
.

cfg:Event_9
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает вложенные индивиды в группу своего родителя." ;
  rdfs:comment "Скрипт включает вложенные индивиды в группу своего родителя." ;
  v-s:triggerByType v-s:Embedded ;
  v-s:preventByType v-s:Version;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
//if (parent_script_id) {
//  print("Not first class event. Exit.");
//  return;
//}

var doc_uri = document["@"],
  parent_uri = veda.Util.getUri( document["v-s:parent"] ),
  deleted = veda.Util.hasValue(document, "v-s:deleted", { data: true, type: "Boolean"});

if (!parent_uri) { return; }

var membership_uri = 'd:membership_' + doc_uri.split(':').join('_') + '_' + parent_uri.split(':').join('_');

if (deleted) {
  remove_individual(ticket, membership_uri, _event_id);
} else {
  var membership = {
    '@' : membership_uri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri(parent_uri),
    'v-s:resource' : veda.Util.newUri(doc_uri),
    'rdfs:comment' : veda.Util.newStr('создано cfg:Event_9')
  };
  put_individual (ticket, membership, _event_id);
}

// Delete embedded tree
if (deleted) {
  Object.keys(document).map(function (property_uri) {
    if (property_uri === "@") { return; }
    document[property_uri].map(function (value) {
      if (value.type !== "Uri") { return; }
      var embedded = get_individual(ticket, value.data);
      if (embedded && veda.Util.hasValue(embedded, "v-s:parent", {data: doc_uri, type: "Uri"}) && !veda.Util.hasValue(embedded, "v-s:deleted", {data: true, type: "Boolean"}) ) {
        embedded["v-s:deleted"] = veda.Util.newBool(true);
        put_individual (ticket, embedded, _event_id);
        //print("embedded deleted:", embedded["@"]);
      }
    });
  });
}
  """ ;
.

cfg:Event_10
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает журнал и записи журнала в группу документа с ограниченим прав до R." ;
  v-s:triggerByType v-s:Journal ;
  v-s:triggerByType v-s:JournalRecord ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
if ( document['v-wf:isTrace'] || veda.Util.getUri(document['rdf:type']) === 'v-wf:TraceRecord' ) { return; }

var this_uri = document['@'],
    group_uri = veda.Util.getUri(document["v-s:onDocument"]) || veda.Util.getUri(document["v-s:parentJournal"]) || veda.Util.getUri(document["v-wf:onProcess"]);

if (!group_uri) { return; }

var membership_uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = {
  '@' : membership_uri,
  'rdf:type'     : veda.Util.newUri('v-s:Membership'),
  'v-s:resource' : veda.Util.newUri(this_uri),
  'v-s:memberOf' : veda.Util.newUri(group_uri),
  'rdfs:comment' : veda.Util.newStr('создано cfg:Event_10'),
  'v-s:canRead'  : veda.Util.newBool(true)
};
put_individual (ticket, membership, _event_id);
//print('cfg:Event_10 journal membership', uri);
  """ ;
.

cfg:Event_11
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  rdfs:comment "Скрипт включает задания в группу запущенного процесса с ограниченим прав до R." ;
  v-s:triggerByType v-wf:Process ;
  v-s:triggerByType v-wf:WorkItem ;
  v-s:triggerByType v-wf:WorkOrder ;
  v-s:triggerByType v-wf:DecisionForm ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
var this_uri = document['@'],
    group_uri = veda.Util.getUri(document["v-wf:forProcess"]) || veda.Util.getUri(document["v-wf:forWorkItem"]) || veda.Util.getUri(document["v-wf:onWorkOrder"]) || veda.Util.getUri(document["v-wf:parentWorkOrder"]);

if (!group_uri) { return; }

var membership_uri = 'd:membership_' + this_uri.split(':').join('_') + '_' + group_uri.split(':').join('_');

var membership = {
  '@' : membership_uri,
  'rdf:type'     : veda.Util.newUri('v-s:Membership'),
  'v-s:resource' : veda.Util.newUri(this_uri),
  'v-s:memberOf' : veda.Util.newUri(group_uri),
  'rdfs:comment' : veda.Util.newStr('создано cfg:Event_11'),
  'v-s:canRead'  : veda.Util.newBool(true)
};
put_individual (ticket, membership, _event_id);
//print('cfg:Event_11 process membership', uri);
  """ ;
.

cfg:Event_12
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт включает процесс в группу журнала документа." ;
  rdfs:comment "Скрипт включает процесс в группу журнала документа." ;
  v-s:triggerByType v-s:ProcessStarted ;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */
var process_uri = veda.Util.getUri(document['v-wf:onProcess']),
    doc_journal_uri = veda.Util.getUri(document['v-s:onDocument']) + "j";

var membership_uri = 'd:membership_' + process_uri.split(':').join('_') + '_' + doc_journal_uri.split(':').join('_');

var membership = {
  '@' : membership_uri,
  'rdf:type'     : veda.Util.newUri('v-s:Membership'),
  'v-s:memberOf' : veda.Util.newUri(doc_journal_uri),
  'v-s:resource' : veda.Util.newUri(process_uri),
  'rdfs:comment' : veda.Util.newStr('создано cfg:Event_12'),
  'v-s:canRead'  : veda.Util.newBool(true)
};
put_individual (ticket, membership, _event_id);
//print('cfg:Event_12 process membership', uri);
  """ ;
.

cfg:Event_13
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Manually create version" ;
  rdfs:comment "Manually create version" ;
  v-s:triggerByType v-s:ManuallyVersioned ;
  v-s:preventByType v-s:Version;
  v-s:script """
/* Available variables:
 * ticket = superuser ticket
 * document = captured document
 * user_uri = user whose actions triggered event
 * prev_state = previous state of the captured document
 * _event_id = id of the event to prevent cycles in triggers. Must be passed to every function that modifies DB.
 * parent_script_id = id of the parent script that triggered this event.
 * parent_document_id = id of the document that triggered this event.
 * super_classes = super classes of the document.
 */

// First class event
if (parent_script_id) {
  // print("Not first class event. Exit.");
  return;
}

// Get actual state
document = get_individual(ticket, document["@"]);
if ( veda.Util.hasValue( document, 'v-s:triggerVersionCreation', {data: true, type: "Boolean"} ) ) {
  delete document['v-s:triggerVersionCreation'];
  veda.Util.create_version(ticket, document, prev_state, user_uri, _event_id);
}
  """ ;
.

cfg:Event_14
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Пусто." ;
  rdfs:comment "Пусто." ;
  v-s:disabled true ;
  v-s:script """
  """ ;
.

cfg:Event_15
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт обработки связей документов" ;
  rdfs:comment "Скрипт обработки связей документов" ;
  v-s:triggerByType v-s:Link ;
  v-s:script """

  // First class event
  if (parent_script_id) {
    // print("Not first class event. Exit.");
    return;
  }

  var linkDeleted = veda.Util.hasValue( document, "v-s:deleted", {data: true, type: "Boolean"} ),
      linkUri = document["@"],
      linkToUri = veda.Util.getUri(document["v-s:to"]),
      linkFromUri = veda.Util.getUri(document["v-s:from"]),
      linkTo = get_individual(ticket, linkToUri),
      linkFrom = get_individual(ticket, linkFromUri),
      containsThisLink,
      mutualMembership = veda.Util.hasValue( document, "v-s:mutualMembership", {data: true, type: "Boolean"} ),
      membershipToFromUri = "d:link_membership_" + linkToUri.split(":").join("_") + "_" + linkFromUri.split(":").join("_"),
      membershipFromToUri = "d:link_membership_" + linkFromUri.split(":").join("_") + "_" + linkToUri.split(":").join("_"),
      membershipToFrom,
      membershipFromTo;

  membershipToFrom = {
    '@' : membershipToFromUri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri(linkFromUri),
    'v-s:resource' : veda.Util.newUri(linkToUri),
    'rdfs:comment' : veda.Util.newStr('создано cfg:Event_15'),
    'v-s:canRead'  : veda.Util.newBool(true)
  };

  membershipFromTo = {
    '@' : membershipFromToUri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri(linkToUri),
    'v-s:resource' : veda.Util.newUri(linkFromUri),
    'rdfs:comment' : veda.Util.newStr('создано cfg:Event_15'),
    'v-s:canRead'  : veda.Util.newBool(true)
  };

  if (linkTo) {
    containsThisLink = veda.Util.hasValue(linkTo, "v-s:hasLink", { data: linkUri, type: "Uri" });
    if (!containsThisLink && !linkDeleted) {
      linkTo["v-s:hasLink"] = ( linkTo["v-s:hasLink"] || [] ).concat({type: "Uri", data: linkUri});
      put_individual(ticket, linkTo, _event_id);
    } else if (containsThisLink && linkDeleted) {
      linkTo["v-s:hasLink"] = linkTo["v-s:hasLink"].filter(function (link) {
        return link.data !== linkUri;
      });
      put_individual(ticket, linkTo, _event_id);
    }
  }
  if (linkFrom) {
    containsThisLink = veda.Util.hasValue(linkFrom, "v-s:hasLink", { data: linkUri, type: "Uri" });
    if (!containsThisLink && !linkDeleted) {
      linkFrom["v-s:hasLink"] = ( linkFrom["v-s:hasLink"] || [] ).concat({type: "Uri", data: linkUri});
      put_individual(ticket, linkFrom, _event_id);
    } else if (containsThisLink && linkDeleted) {
      linkFrom["v-s:hasLink"] = linkFrom["v-s:hasLink"].filter(function (link) {
        return link.data !== linkUri;
      });
      put_individual(ticket, linkFrom, _event_id);
    }
  }
  if (linkDeleted) {
    remove_individual(ticket, membershipToFromUri, _event_id);
    print( "membershipToFrom removed", membershipToFrom["@"] );
  } else {
    put_individual(ticket, membershipToFrom, _event_id);
    print( "membershipToFrom added", JSON.stringify(membershipToFrom) );
  }
  if (mutualMembership) {
    if (linkDeleted) {
      remove_individual(ticket, membershipFromToUri, _event_id);
      print( "membershipFromTo removed", membershipFromTo["@"] );
    } else {
      put_individual(ticket, membershipFromTo, _event_id);
      print( "membershipFromTo added", JSON.stringify(membershipFromTo) );
    }
  }
  """ ;
.

cfg:Event_15_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт обработки связей документов" ;
  rdfs:comment "Скрипт обработки связей документов" ;
  v-s:triggerByType v-s:LinkObject ;
  v-s:script """

  // First class event
  if (parent_script_id) {
    // print("Not first class event. Exit.");
    return;
  }

  var linkDeleted = veda.Util.hasValue( document, "v-s:deleted", {data: true, type: "Boolean"} ),
      linkUri = document["@"],
      linkToUri = veda.Util.getUri(document["v-s:to"]),
      linkFromUri = veda.Util.getUri(document["v-s:from"]),
      linkTo = get_individual(ticket, linkToUri),
      linkFrom = get_individual(ticket, linkFromUri),
      containsThisLin;
     /* mutualMembership = veda.Util.hasValue( document, "v-s:mutualMembership", {data: true, type: "Boolean"} ),
      membershipToFromUri = "d:link_membership_" + linkToUri.split(":").join("_") + "_" + linkFromUri.split(":").join("_"),
      membershipFromToUri = "d:link_membership_" + linkFromUri.split(":").join("_") + "_" + linkToUri.split(":").join("_"),
      membershipToFrom,
      membershipFromTo;

  membershipToFrom = {
    '@' : membershipToFromUri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri(linkFromUri),
    'v-s:resource' : veda.Util.newUri(linkToUri),
    'rdfs:comment' : veda.Util.newStr('создано cfg:Event_15'),
    'v-s:canRead'  : veda.Util.newBool(true)
  };

  membershipFromTo = {
    '@' : membershipFromToUri,
    'rdf:type'     : veda.Util.newUri('v-s:Membership'),
    'v-s:memberOf' : veda.Util.newUri(linkToUri),
    'v-s:resource' : veda.Util.newUri(linkFromUri),
    'rdfs:comment' : veda.Util.newStr('создано cfg:Event_15'),
    'v-s:canRead'  : veda.Util.newBool(true)
  };
*/
  if (linkTo) {
    containsThisLink = veda.Util.hasValue(linkTo, "v-s:hasLinkObject", { data: linkUri, type: "Uri" });
    if (!containsThisLink && !linkDeleted) {
      linkTo["v-s:hasLinkObject"] = ( linkTo["v-s:hasLinkObject"] || [] ).concat({type: "Uri", data: linkUri});
      put_individual(ticket, linkTo, _event_id);
    } else if (containsThisLink && linkDeleted) {
      linkTo["v-s:hasLinkObject"] = linkTo["v-s:hasLinkObject"].filter(function (link) {
        return link.data !== linkUri;
      });
      put_individual(ticket, linkTo, _event_id);
    }
  }
  if (linkFrom) {
    containsThisLink = veda.Util.hasValue(linkFrom, "v-s:hasLinkObject", { data: linkUri, type: "Uri" });
    if (!containsThisLink && !linkDeleted) {
      linkFrom["v-s:hasLinkObject"] = ( linkFrom["v-s:hasLinkObject"] || [] ).concat({type: "Uri", data: linkUri});
      put_individual(ticket, linkFrom, _event_id);
    } else if (containsThisLink && linkDeleted) {
      linkFrom["v-s:hasLinkObject"] = linkFrom["v-s:hasLinkObject"].filter(function (link) {
        return link.data !== linkUri;
      });
      put_individual(ticket, linkFrom, _event_id);
    }
  }
  /*if (linkDeleted) {
    remove_individual(ticket, membershipToFromUri, _event_id);
    print( "membershipToFrom removed", membershipToFrom["@"] );
  } else {
    put_individual(ticket, membershipToFrom, _event_id);
    print( "membershipToFrom added", JSON.stringify(membershipToFrom) );
  }
  if (mutualMembership) {
    if (linkDeleted) {
      remove_individual(ticket, membershipFromToUri, _event_id);
      print( "membershipFromTo removed", membershipFromTo["@"] );
    } else {
      put_individual(ticket, membershipFromTo, _event_id);
      print( "membershipFromTo added", JSON.stringify(membershipFromTo) );
    }
  }*/
  """ ;
.

cfg:Event_16
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт обработки обратных ссылок" ;
  rdfs:comment "Скрипт обработки обратных ссылок" ;
  v-s:triggerByType v-s:BackwardLink ;
  v-s:preventByType v-s:Version;
  v-s:disallowChangingSource "true"^^xsd:boolean ;
  v-s:script """

  // First class event
  if (parent_script_id) {
    // print("Not first class event. Exit.");
    return;
  }

  var backwardLinkUri = document["@"],
      backwardPropertyUri = veda.Util.getUri(document["v-s:backwardProperty"]),
      backwardTargetUris = veda.Util.getUris(document["v-s:backwardTarget"]),
      backwardReplaceUris = veda.Util.getUris(document["v-s:backwardReplace"]),
      canRead   = document["v-s:canRead"],
      canUpdate = document["v-s:canUpdate"],
      canDelete = document["v-s:canDelete"],
      isDeleted = veda.Util.hasValue(document, "v-s:deleted", { data: true, type: "Boolean" }),
      forceUpdate = veda.Util.hasValue(document, "v-s:backwardForceUpdate", { data: true, type: "Boolean" });

  //expected equal backwardPropery and backwardReplaceUris for all backwardTargets
  for (var i = 0; i < backwardTargetUris.length; i++) {
    var backwardTargetUri = backwardTargetUris[i],
        backwardTarget = get_individual(ticket, backwardTargetUri),
        backwardTarget_original = JSON.stringify(backwardTarget);
    if (!backwardTarget) { return; }

    if (canRead || canUpdate || canDelete) {
      var membershipUri = "d:backward_membership_" + backwardLinkUri.split(":").join('_') + '_' + backwardTargetUri.split(':').join('_');

      if (isDeleted) {
        remove_individual(ticket, membershipUri, _event_id);
      } else {
        var membership = {
          '@' : membershipUri,
          'rdf:type'     : veda.Util.newUri('v-s:Membership'),
          'v-s:memberOf' : veda.Util.newUri(backwardTargetUri),
          'v-s:resource' : veda.Util.newUri(backwardLinkUri),
          'rdfs:comment' : veda.Util.newStr('создано cfg:Event_16')
        };
        if (canRead) {
          membership["v-s:canRead"] = canRead;
        }
        if (canUpdate) {
          membership["v-s:canUpdate"] = canUpdate;
        }
        if (canDelete) {
          membership["v-s:canDelete"] = canDelete;
        }
        if (isDeleted) {
          membership['v-s:deleted'] = veda.Util.newBool(true);
        }
        put_individual(ticket, membership, _event_id);
      }
    }

    if (veda.Util.hasValue(document, "v-s:mutualMembership", { data: true, type: "Boolean" })) {
      var mutualMembershipUri = "d:backward_m_membership_" + backwardTargetUri.split(':').join('_') + '_' + backwardLinkUri.split(":").join('_');
      if (isDeleted) {
        remove_individual(ticket, mutualMembershipUri, _event_id);
      } else {
        var mMembership = {
          '@' : mutualMembershipUri,
          'rdf:type'     : veda.Util.newUri('v-s:Membership'),
          'v-s:memberOf' : veda.Util.newUri(backwardLinkUri),
          'v-s:resource' : veda.Util.newUri(backwardTargetUri),
          'rdfs:comment' : veda.Util.newStr('создано cfg:Event_16 (mutual membership)'),
          'v-s:canRead' : veda.Util.newBool(true)
        };
        put_individual(ticket, mMembership, _event_id);
      };
    };

    if (isDeleted) {
      for (var property_uri in backwardTarget) {
        if (property_uri === "@") { continue; }
        backwardTarget[property_uri] = backwardTarget[property_uri].filter(function (value) {
          return (value.data !== backwardLinkUri);
        });
      }
    } else if (backwardPropertyUri) {
      var alreadyThere = veda.Util.hasValue(backwardTarget, backwardPropertyUri, { data: backwardLinkUri, type: "Uri" });
      //print( "BL already there =", alreadyThere );
      if ( !alreadyThere ) {
        backwardTarget[backwardPropertyUri] = backwardTarget[backwardPropertyUri] || [];
        backwardTarget[backwardPropertyUri].push({type: "Uri", data: backwardLinkUri});
      }
    }
    backwardReplaceUris.forEach(function (replaceUri) {
      backwardTarget[replaceUri] = document[replaceUri];
    });
    if (forceUpdate || JSON.stringify(backwardTarget) !== backwardTarget_original) {
      put_individual(ticket, backwardTarget, _event_id);
      //print( "BL target updated =", JSON.stringify(backwardTarget) );
    }
  }
  """ ;
.

cfg:Event_Hourly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в час" ;
  v-s:triggerByUid cfg:hourly ;
  v-s:script """
print("[cfg:Event_Hourly_1] ************************** START **************************");
print("[cfg:Event_Hourly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Daily_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в день" ;
  v-s:triggerByUid cfg:daily ;
  v-s:script """
print("[cfg:Event_Daily_1] ************************** START **************************");
print("[cfg:Event_Daily_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Daily_Additional
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в день, создан для сохранения очердности" ;
  v-s:triggerByUid cfg:dailyAdditional ;
  v-s:script """
print("[cfg:Event_Daily_Additional] ************************** START **************************");
print("[cfg:Event_Daily_Additional] *************************** END ***************************");
  """ ;
.
cfg:Event_Weekly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в неделю" ;
  v-s:triggerByUid cfg:weekly ;
  v-s:script """
print("[cfg:Event_Weekly_1] ************************** START **************************");
print("[cfg:Event_Weekly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Monthly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в месяц" ;
  v-s:triggerByUid cfg:monthly ;
  v-s:script """
print("[cfg:Event_Monthly_1] ************************** START **************************");
print("[cfg:Event_Monthly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Yearly_1
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт запускается раз в год" ;
  v-s:triggerByUid cfg:yearly ;
  v-s:script """
print("[cfg:Event_Yearly_1] ************************** START **************************");
print("[cfg:Event_Yearly_1] *************************** END ***************************");
  """ ;
.
cfg:Event_Notify_Task
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт уведомления о новой задаче" ;
  v-s:triggerByType v-wf:UserTaskForm ;
  v-s:disabled true ;
  v-s:script """
var task_id = document["@"],
    to = veda.Util.getUri(document["v-wf:to"]);
//print("cfg:Event_17", "caught", "task", task_id, "to", to);
  """ ;
.
cfg:Event_Notify_Comment
  rdf:type v-s:Event ;
  v-s:author cfg:VedaSystemAppointment ;
  rdfs:label "Скрипт уведомления о новом комментарии" ;
  v-s:triggerByType v-s:Comment ;
  v-s:disabled true ;
  v-s:script """
var comment_id = document["@"],
    comment_target = veda.Util.getUri(document["v-s:backwardTarget"]),
    stakeholder = veda.Util.getUri(comment_target["v-s:author"]);
//print("cfg:Event_18", "caught", "comment", comment_id, "target", comment_target);
  """ ;
.
