@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix v-fc: <http://semantic-machines.com/veda/veda-function-create/> .
@prefix v-fs: <http://semantic-machines.com/veda/veda-function-search/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://semantic-machines.com/veda/veda-function-contacts>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология функции контакты"@ru ;
  rdfs:label "Contacts function ontology"@en ;
  v-s:loadPriority 9 ;
.
v-s:ContactsFunction
  rdf:type owl:Class ;
  rdfs:subClassOf v-s:Function ;
  rdfs:label "Функция управления контактами"@ru ;
  rdfs:label "Contacts management function"@en ;
.

v-s:managedOrganization
  rdf:type owl:ObjectProperty ;
  rdfs:label "Организация"@ru ;
  rdfs:label "Organization"@en ;
  rdfs:domain v-s:ContactsFunction ;
  rdfs:range v-s:Organization ;
.

v-s:PSmanagedOrganization
  rdf:type v-ui:ObjectPropertySpecification ;
  rdfs:label "Спецификация свойства v-s:managedOrganization для класса v-s:ContactsFunction"@ru ;
  rdfs:label "v-s:managedOrganization property specification for v-s:ContactsFunction class"@en ;
  v-ui:forClass v-s:ContactsFunction ;
  v-ui:forProperty v-s:managedOrganization ;
  v-ui:minCardinality 0 ;
  v-ui:maxCardinality 1 ;
  v-ui:queryPrefix "('rdf:type' == 'v-s:Organization')"^^xsd:string ;
  v-ui:placeholder "Выберите организацию"@ru ;
  v-ui:placeholder "Choose organization"@en ;
.

v-s:Contacts
  rdf:type v-s:ContactsFunction ;
  rdfs:label "Контакты"@ru ;
  rdfs:label "Contacts"@en ;
  rdfs:comment "Организационная структура"@ru ;
  rdfs:comment "Organization chart"@en ;
  v-ui:hasTemplate v-s:ContactsTemplate ;
.

v-s:ContactsSearch
  rdf:type v-fs:AttributiveSearch ;
  rdfs:label "Поиск"@ru ;
  rdfs:label "Search"@en ;
  v-fs:searchBlank v-s:ContactsSearchRegistryBlank ;
  v-fs:searchBlankTemplate v-s:ContactsSearchBlankTemplate ;
  v-fs:searchResultTemplate v-s:ContactsSearchResultTemplate ;
  v-fs:sortOrder "'rdfs:label' asc";
.

v-s:ContactsSearchRegistryBlank
  a v-fc:Blank ;
  rdfs:label "Бланк поиска контактов"@ru ;
  rdfs:label "Contacts search blank"@en ;
  v-fc:targetType v-s:Person ;
.

v-s:ContactsTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон функции контакты"@ru ;
  rdfs:label "Contacts function template"@en ;
  v-ui:template """
<script>
  if (!individual.hasValue("v-s:managedOrganization")) {
    return veda.appointment.getOrganization().then(function (managedOrganization) {
      individual["v-s:managedOrganization"] = [ managedOrganization ];
    });
  };
//# sourceURL=v-s:ContactsTemplate_pre
</script>
<div class="container sheet">
  <style>
    table {
      max-width: 250px;
    }
    td {
      white-space: nowrap;
    }
    /*div.value-row {
      margin-top: 5px;
    }*/
    div.value-row > div.item {
      padding: 8px;
    }
    div.item:hover {
      background-color: #fcf8e3;
    }
    div.item.warning {
      background-color: #faf2cc;
    }
    #searchText input {
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
    }
    .children {
      border-left: 1px dashed #eee;
      padding-left: 8px;
      margin-left: 14px;
    }
  </style>
  <h2 about="@" property="rdfs:label"></h2>
  <veda-control data-type="link" rel="v-s:managedOrganization" class="fulltext dropdown"></veda-control>
  <br>
  <div>
    <div class="input-group">
      <veda-control id="searchText" property="*" data-type="string"></veda-control>
      <span class="input-group-btn">
        <button id="searchButton" class="btn btn-primary" type="button" about="v-fs:Find" property="rdfs:label"></button>
        <button id="resetButton" class="btn btn-warning" type="button" about="v-s:Reset" property="rdfs:label"></button>
      </span>
    </div>
  </div>
  <br>
  <div class="orgTree"></div>
</div>
<script>
  var orgTree = $(".orgTree", template);
  var controlBlock = '<div class="controlButtons" style="float:right"><div class="btn create btn-xs btn-primary"><i class="glyphicon glyphicon-plus"></i></div><div class="btn edit btn-xs btn-default"><i class="glyphicon glyphicon-pencil"></i></div><div class="btn remove btn-xs btn-danger"><i class="glyphicon glyphicon-remove"></i></div></div>';
  var zoomIn = '<a href="#" class="zoomIn glyphicon glyphicon-zoom-in margin-sm-h"></a>';
  var controlButtons = "";
  var appointmentButtons = "";
  var departmentButtons = "";

  function generateDepartmentControls() {
    var buttons = [];
    var controls = $('<div class="controlButtons" style="float:right"></div>');
    var addDepartmentControl = '<button id="add-Department" class="btn btn-xs margin-sm-h btn-primary">Добавить отдел</button>';
    var addAppointmentControl = '<button id="add-Appointment" class="btn btn-xs margin-sm-h btn-info">Назначить сотрудника</button>';
    if (veda.appointment.id !== 'cfg:AdministratorAppointment') {
      if ( !veda.appointment['v-s:parentOrganization'] ) {
        return Promise.resolve(controls);
      }
      var parentOrg = veda.appointment['v-s:parentOrganization'][0];
      var allowedOrganizations = [parentOrg];
      return parentOrg.getPropertyChain("v-s:hasContractorProfileSafety", "mnd-s:subContractor").then(function (subContractors) {
        return allowedOrganizations.concat(subContractors);
      }).then(function (allowedOrganizations) {
        var isAllowedOrg = allowedOrganizations.some(function(org) {
          return org.id === individual['v-s:managedOrganization'][0].id;
        });
        if ( isAllowedOrg ) {
          var department =  new veda.IndividualModel("v-s:Department");
          var appointment =  new veda.IndividualModel("v-s:Appointment");
          var position =  new veda.IndividualModel("v-s:Position");
          var person =  new veda.IndividualModel("v-s:Person");

          return Promise.all([department.canCreate(), appointment.canCreate(), position.canCreate(), person.canCreate()]).then(function (rights) {
            var canCreateDepartment = rights[0];
            var canCreateAppointment = rights[1];
            var canCreatePosition = rights[2];
            var canCreatePerson = rights[3];
            if (canCreateDepartment) {
              controls.append(addDepartmentControl);
            }
            if (canCreateAppointment && canCreatePosition && canCreatePerson) {
              controls.append(addAppointmentControl);
            }
            return controls;
          });
        }
      });
    } else {
      controls.append(addDepartmentControl);
      controls.append(addAppointmentControl);
    }
    return Promise.resolve(controls);
  }

  /*function generateAppointmentControls(targetAppointment){
    var controls = $('<div class="controlButtons" style="float:right"></div>');
    var delAppointmentControl = '<button id="delete-Appointment" class="btn btn-xs margin-sm-h btn-danger">Удалить назначение</button>';
    if (veda.appointment.id !== 'cfg:AdministratorAppointment') {
      if (!veda.appointment['v-s:parentOrganization']) {
        return Promise.resolve(controls);
      }
      if (veda.appointment['v-s:parentOrganization'][0].id == individual['v-s:managedOrganization'][0].id) {
        var appointment =  new veda.IndividualModel(targetAppointment);
        appointment.canDelete().then(function (canDeleteAppointment) {
          if (canDeleteAppointment) {
            controls.append(delAppointmentControl);
          }
          return controls;
        });
      }
    } else {
      controls.append(delAppointmentControl);
    }
    return Promise.resolve(controls);
  }*/

  function initialStructure() {
    orgTree.empty();
    if ( individual.hasValue('v-s:managedOrganization') ) {
      generateDepartmentControls().then(function (generatedButtons) {
        departmentButtons = generatedButtons;
        var org = individual['v-s:managedOrganization'][0];
        getTemplate(org).then(function (tmpl) {
          return org.present(orgTree, tmpl);
        }).then(function (rendered) {
          $('.value-row a.expand.glyphicon-chevron-right', template).click();
        });
      });
    }
  }

  function drawChildren(parentUri, rootElement, filteredItems) {
    if (filteredItems) {
      orgTree.empty();
      rootElement.append('<div class="children"></div>');
      childrenContainer = rootElement.children('.children');
      filteredItems.forEach(function (item) {
        getTemplate(item).then(function (tmpl) {
          item.present(childrenContainer, tmpl);
        });
      });
    } else {
      var childrenContainer = rootElement.children('.children');
      if (childrenContainer.length) {
        childrenContainer.show();
      } else {
        rootElement.append('<div class="children"></div>');
        childrenContainer = rootElement.children('.children');
        getChildren(new veda.IndividualModel(parentUri), true).then(function (childrenUris) {
          childrenUris.forEach(function(childUri) {
            var child = new veda.IndividualModel(childUri);
            getTemplate(child).then(function (tmpl) {
              child.present(childrenContainer, tmpl);
            });
          });
        });
      }
    }
  }

  function getChildren(parent, refresh) {
    if (parent.children && !refresh) {
      return Promise.resolve(parent.children);
    }
    var childrenUris = [];
    if (parent.hasValue('rdf:type','v-s:Appointment')) {
      return Promise.resolve([]);
    }
    var parentUri = parent.id;
    var parentOrgUri = individual["v-s:managedOrganization"][0].id;
    var queryPattern = "'v-s:parentUnit'=='" + parentUri + "' && ";

    var queryDepartments = queryPattern + "'rdf:type'=='v-s:Department'";
    var queryAppointment = queryPattern + "'rdf:type'=='v-s:Appointment'";
    var queryStringArray = [];
    if (parent.hasValue('rdf:type', 'v-s:Department')) {
      queryStringArray = [queryDepartments, queryAppointment];
    } else if (parent.hasValue('rdf:type', 'v-s:OrgGroup')) {
      queryStringArray = [queryAppointment];
    } else if (parent.hasValue('rdf:type', 'v-s:Organization')) {
      var queryOrgGroup = queryPattern + "'rdf:type'=='v-s:OrgGroup'";
      var querySubsidiary = "'v-s:parentOrganization'=='" + parentUri + "' && 'rdf:type'=='v-s:Subsidiary'";
      var queryOrganization = queryPattern + "'rdf:type'=='v-s:Organization'";
      queryStringArray = [queryOrganization, querySubsidiary, queryDepartments, queryOrgGroup, queryAppointment];
    }

    var sort = "'rdfs:label' desc";
    var queries = queryStringArray.map(function (queryString) {
      return veda.Backend.query({ticket: veda.ticket, query: queryString, sort: sort});
    });
    return Promise.all(queries).then(function (queryResults) {
      queryResults.forEach(function (queryResult) {
        childrenUris = childrenUris.concat(queryResult.result);
      });
      childrenUris = veda.Util.unique(childrenUris);
      parent.children = childrenUris;
      return childrenUris;
    });
  }


  function getTemplate(value) {
    return value.load().then(function (value) {
      var rowTmpl = "<div class='value-row'>" +
                      "<div class='item'>" +
                        "{expand}" +
                        "<span style='margin:0 5px;' class='fa fa-lg {icon}'></span>" +
                        "<span about='@' data-template='v-ui:LabelTemplate'></span>" +
                      "</div>" +
                    "</div>";
      var icon = "";
      var expand = "";
      if ( value.hasValue('rdf:type', 'v-s:Appointment') ) {
        icon = "fa-user-o";
        return rowTmpl.replace("{icon}", icon).replace("{expand}", expand);
      } else {
        return getChildren(value).then(function (children) {
          if ( children.length > 0 ) {
            expand = "<a href='#' class='expand glyphicon glyphicon-chevron-right'></a>";
          }
          if ( value.hasValue('rdf:type', 'v-s:Organization') ) {
            icon = 'fa-sitemap';
          }
          if ( value.hasValue('rdf:type', 'v-s:Department' ) || value.hasValue('rdf:type', 'v-s:OrgGroup') ) {
            icon = 'fa-folder-o';
          }
          return rowTmpl.replace("{icon}", icon).replace("{expand}", expand);
        });
      }
    });
  }

  template.on("click", "a.expand.glyphicon-chevron-right", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var row = self.closest('div.value-row');
    var uri = row.attr('resource');
    self.toggleClass("expanded glyphicon-chevron-right glyphicon-chevron-down");
    drawChildren(uri, row);
    return false;
  });

  template.on("click", "a.expanded.glyphicon-chevron-down", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    self.toggleClass("expanded glyphicon-chevron-right glyphicon-chevron-down");
    var row = self.closest('div.value-row');
    row.children('div.children').hide();
    return false;
  });

  template.on("click", "a.glyphicon-zoom-in", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var row = self.closest('div.value-row');
    var uri = row.attr('resource');
    var obj = new veda.IndividualModel(uri);
    var tmpl;
    if (obj.hasValue('rdf:type', 'v-s:Appointment')) {
      obj = obj['v-s:employee'][0];
      tmpl = undefined;
    } else if (obj.hasValue('rdf:type', 'v-s:Department')) {
      tmpl = 'v-s:DepartmentTemplate';
    } else if (obj.hasValue('rdf:type', 'v-s:Organization')) {
      tmpl = undefined;
    }
    riot.route( ["#", obj.id, "#main", tmpl].join("/") );
    //veda.Util.showModal(obj, tmpl);
    return false;
  });

  template.on("click", "div.value-row", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var item = self.children('.item');
    if (!item.hasClass('warning')) {
      $('.item.warning', template).removeClass('warning');
      $('.controlButtons', template).remove();
      $('.zoomIn', template).remove();
      item.addClass('warning');
      item.append(zoomIn);
      if (self.attr('typeof') == 'v-s:Appointment') {
        generateAppointmentControls(self.attr('resource')).then(function (appointmentButtons) {
          item.append(appointmentButtons);
        });
      } else {
        item.append(departmentButtons);
      }
    }
    return false;
  });

  template.on("click", "#add-Department", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var row = self.closest('div.value-row');
    var parentUri = row.attr('resource');

    var NewDepartment = new veda.IndividualModel();
    var _class = new veda.IndividualModel('v-s:Department');
    var tmpl = 'v-s:DepartmentTemplate';
    NewDepartment['rdf:type'] = [_class];
    NewDepartment['v-s:parentUnit'] = [new veda.IndividualModel(parentUri)];
    NewDepartment['v-s:parentOrganization'] = individual['v-s:managedOrganization'];
    var modal = veda.Util.showModal(NewDepartment, tmpl, "edit");

    NewDepartment.one("afterSave", saveHandler)
    NewDepartment.one("afterReset", resetHandler);
    template.one("remove", function () {
      NewDepartment.off("afterSave", saveHandler);
      NewDepartment.off("afterReset", resetHandler);
    });
    function saveHandler() {
      modal.modal("hide").remove();
      setTimeout(function () {
        row.find('.children').remove();
        drawChildren(parentUri, row);
      }, 2000);
    }
    function resetHandler() {
      modal.modal("hide").remove();
    }
    return false;
  });

  template.on("click", "#add-Appointment", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var row = self.closest('div.value-row');
    var parentUri = row.attr('resource');

    var NewAppointment = new veda.IndividualModel();
    var _class = new veda.IndividualModel('v-s:Appointment');
    var tmpl = new veda.IndividualModel('v-s:NewAppointmentTemplate');
    NewAppointment['rdf:type'] = [_class];
    NewAppointment['v-s:parentUnit'] = [new veda.IndividualModel(parentUri)];
    NewAppointment['v-s:parentOrganization'] = individual['v-s:managedOrganization'];

    var modal = veda.Util.showModal(NewAppointment, tmpl, "edit");
    NewAppointment.one("afterSave", saveHandler);
    NewAppointment.one("afterReset", resetHandler);
    template.one("remove", function () {
      NewAppointment.off("afterSave", saveHandler);
      NewAppointment.off("afterReset", resetHandler);
    });
    function saveHandler() {
      modal.modal("hide").remove();
      setTimeout(function () {
        row.find('.children').remove();
        drawChildren(parentUri, row);
      }, 2000);
    }
    function resetHandler() {
      modal.modal("hide").remove();
    }
    return false;
  });

  /*template.on("click", "#delete-Appointment", function (e) {
    e.stopPropagation();
    e.preventDefault();
    var self = $(this);
    var currentRow = self.closest('div.value-row');
    var parentRow = currentRow.parent().closest("[resource]");
    var warning = new veda.IndividualModel("v-s:AreYouSure")["rdfs:label"].map(veda.Util.formatValue).join(" ");
    if ( !confirm(warning) ) { return; }
    currentRow.closest("[resource]").trigger('delete');
    setTimeout(function () {
      parentRow.find('.children').remove();
      drawChildren(parentRow.attr('resource'), parentRow);
    }, 2000);
    return false;
  });*/

  initialStructure();
  individual.on('v-s:managedOrganization', initialStructure);
  template.one('remove', function(){
    individual.off('v-s:managedOrganization', initialStructure);
  });

  $('#searchButton', template).click(function(){
    var searchText = $('#searchText input', template).val();
    if (!searchText) return;
    var sort = "'rdfs:label' desc";
    var q = "('rdf:type'==='v-s:OrgGroup' || 'rdf:type'==='v-s:Department' || 'rdf:type'==='v-s:Organization' || 'rdf:type'==='v-s:Appointment') && 'v-s:parentOrganization'=='"+ individual['v-s:managedOrganization'][0].id +"' && 'rdfs:label'=='"+ searchText +"*'";
    veda.Backend.query({
      ticket: veda.ticket,
      query: q,
      sort: sort,
      async: true
    }).then(function (queryResult) {
      var unique = veda.Util.unique( queryResult.result );
      var items = [];
      unique.forEach(function (item) {
        var temp = new veda.IndividualModel(item);
        items.push(new veda.IndividualModel(item));
      });
      drawChildren(undefined, orgTree, items);
      return items;
    });
  });

  $('#resetButton', template).click(function () {
    $('#searchText input', template).val('');
    initialStructure();
  });
  //# sourceURL=v-s:ContactsTemplate_post
</script>
  """
.

v-s:ContactsSearchBlankTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон бланка поиска контактов"@ru ;
  rdfs:label "Contacts search blank template"@en ;
  v-ui:template """
<div>
  <style>
    .input-group input {
      border-top-left-radius: 4px!important;
      border-bottom-left-radius: 4px!important;
    }
  </style>
  <div class="input-group">
    <veda-control property="*" data-type="string"></veda-control>
    <span class="input-group-btn">
      <button class="btn btn-primary custom-find" type="button" about="v-fs:Find" property="rdfs:label"></button>
    </span>
  </div>
  <br>
</div>
<script>
  container.siblings("br").remove();
  var find = container.siblings(".search-actions").find(".search-button").addClass("hidden");
  var customFind = $(".custom-find", template);
  customFind.click(function () {
    find.click();
  });
  $("input", template).keydown(function (e) {
    if (e.which === 13) {
      var value = this.value;
      individual.set("*", [value]);
      find.click();
    }
  });
//# sourceURL=v-s:ContactsSearchBlankTemplate_post
</script>
  """ ;
.

v-s:ContactsSearchResultTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения результатов поиска для контактов"@ru ;
  rdfs:label "Contacts search result template"@en ;
  v-ui:template """
<table class="table table-condensed table-striped">
  <thead class="result-header">
    <tr>
      <th width="1%">#</th>
      <th width="1%"><span class="glyphicon glyphicon-search"></span></th>
      <th class="orderby" data-orderby="v-s:lastName"><span about="v-s:lastName" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:firstName"><span about="v-s:firstName" property="rdfs:label"></span></th>
      <th class="orderby" data-orderby="v-s:middleName"><span about="v-s:middleName" property="rdfs:label"></span></th>
      <th><span about="v-s:occupation" property="rdfs:label"></span></th>
    </tr>
  </thead>
  <tbody class="result-container">
    <tr>
      <td class="serial-number"></td>
      <td about="@" data-template="v-ui:IconModalTemplate"></td>
      <td about="@" property="v-s:lastName"></td>
      <td about="@" property="v-s:firstName"></td>
      <td about="@" property="v-s:middleName"></td>
      <td about="@" rel="v-s:defaultAppointment"><span rel="v-s:occupation" data-template="v-ui:LabelTemplate"></span></td>
    </tr>
  </tbody>
</table>
  """ ;
.

v-s:OrganizationUnitTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения единицы организационной структуры"@ru ;
  rdfs:label "Organization unit template"@en ;
  v-ui:forClass v-s:OrganizationUnit ;
  v-ui:template """
<div class="container sheet">
  <h3><span about="@" property="rdfs:label"></span></h3>
  <span about="@" data-template="v-ui:RabbitHole" data-properties="v-s:parentUnit"></span>
  <hr>
  <div>
    <div class="-view edit search">
      <em about="rdfs:label" property="rdfs:label"></em>
      <div property="rdfs:label" class="view -edit -search"></div>
      <veda-control data-type="string" property="rdfs:label" class="-view edit search"></veda-control>
      <hr class="view -edit -search">
    </div>
    <em about="v-s:parentUnit" property="rdfs:label"></em>
    <div rel="v-s:parentUnit" class="view -edit -search" data-template="v-ui:LabelLinkTemplate"></div>
    <veda-control data-type="link" rel="v-s:parentUnit" class="-view edit search fulltext"></veda-control>
    <div class="row">
      <div class="col-sm-6">
        <em about="v-s:hasChief" property="rdfs:label"></em>
        <div rel="v-s:hasChief" class="view -edit search" data-template="v-ui:LabelTemplate"></div>
        <veda-control data-type="link" rel="v-s:hasChief" class="-view edit search fulltext"></veda-control>
      </div>
      <div class="col-sm-6">
        <em about="v-s:hasFunctionalChief" property="rdfs:label"></em>
        <div rel="v-s:hasFunctionalChief" class="view -edit search" data-template="v-ui:LabelTemplate"></div>
        <veda-control data-type="link" rel="v-s:hasFunctionalChief" class="-view edit search fulltext"></veda-control>
      </div>
    </div>
  </div>
  <br>
  <!-- BUTTONS -->
  <div class="actions">
    <span about="@" data-template="v-ui:StandardButtonsTemplate" data-embedded="true" data-buttons="edit save cancel delete"></span>
  </div>
</div>
  """ ;
.

v-s:OrganizationUnitContentTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения единицы организационной структуры"@ru ;
  rdfs:label "Organization unit template"@en ;
  v-ui:forClass v-s:OrganizationUnit ;
  v-ui:template """
<script>
  var blank = new veda.IndividualModel("v-s:ContactsInUnitSearchRegistryBlank");
  return blank.load().then(function (blank) {
    blank.initBlank().then(function (blankObject) {
      if ( !blankObject.hasValue("v-s:parentUnit", individual) ) {
        blankObject["v-s:parentUnit"] = [ individual ];
        var search = new veda.IndividualModel("v-s:ContactsInUnitSearch");
        return search.load().then(function (search) {
          search["v-fs:searchResult"] = [];
        });
      }
    });
  });
//# sourceURL=v-s:OrganizationUnitContentTemplate_pre
</script>
<div>
  <h4><span about="@" property="rdfs:label"></span></h4>
  <span about="@" data-template="v-ui:RabbitHole" data-properties="v-s:parentUnit"></span>
  <hr>
  <div about="v-s:ContactsInUnitSearch" data-template="v-fs:AttributiveSearchInlineTemplate"></div>
</div>
  """ ;
.

v-s:ContactsInUnitSearch
  rdf:type v-fs:AttributiveSearch ;
  rdfs:label "Поиск"@ru ;
  rdfs:label "Search"@en ;
  v-fs:searchBlank v-s:ContactsInUnitSearchRegistryBlank ;
  v-fs:searchResultTemplate v-s:ContactsInUnitSearchResultTemplate ;
  v-fs:sortOrder "'rdf:type.rdfs:label' desc" ;
  v-fs:searchOnLoad true ;
.

v-s:ContactsInUnitSearchRegistryBlank
  a v-fc:Blank ;
  rdfs:label "Бланк поиска контактов"@ru ;
  rdfs:label "Contacts search blank"@en ;
  v-fc:targetType v-s:Appointment ;
#  v-fc:targetType v-s:Position ;
  v-fc:targetType v-s:Department ;
  v-fc:targetType v-s:OrgGroup ;
.

v-s:ContactsInUnitSearchResultTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения результатов поиска для контактов"@ru ;
  rdfs:label "Contacts search result template"@en ;
  v-ui:template """
<div>
  <div class="result-container">
    <script>
      if ( individual.hasValue("rdf:type", "v-s:Appointment") ) {
        template.children().not(".app").remove();
      } else if ( individual.hasValue("rdf:type", "v-s:Department") || individual.hasValue("rdf:type", "v-s:OrgGroup") ) {
        template.children().not(".dep").remove();
      } else if ( individual.hasValue("rdf:type", "v-s:Organization") ) {
        template.children().not(".org").remove();
      }
    //# sourceURL=v-s:ContactsInUnitSearchResultTemplate
    </script>
    <div>
      <hr class="app dep org margin-md">
      <span style="width:20px" class="app fa fa-lg fa-user-o"></span>
      <span style="width:20px" class="dep fa fa-lg fa-folder-o"></span>
      <span style="width:20px" class="org fa fa-lg fa-sitemap"></span>
      <strong class="app" about="@" rel="v-s:employee">
        <span property="rdfs:label"></span>
      </strong>
      <span class="app" about="@" rel="v-s:occupation">
        <span property="rdfs:label"></span>
      </span>
      <span class="app" about="@" rel="v-s:employee">
        <span property="v-s:phone"></span>
      </span>
      <span class="app" about="@" rel="v-s:employee">
        <span rel="v-s:hasAccount">
          <a class="view -edit -search" about="@" property="v-s:mailbox"></a>
          <script>
            template.attr("href", "mailto:" + individual["v-s:mailbox"][0]);
          </script>
        </span>
      </span>
      <strong class="dep org" about="@" property="rdfs:label"></strong>
    </div>
  </div>
  <br>
</div>
  """ ;
.

v-s:AppointmentContactTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения контакта персоны"@ru ;
  rdfs:label "Person contact template"@en ;
  v-ui:forClass v-s:Person ;
  v-ui:template """
<div class="horizontal-card horizontal-card-sm">
  <div class="thumbnail" about="@" rel="v-s:hasImage" data-template="v-ui:ImageTemplate"></div>
  <div class="description">
    <div about="@" rel="v-s:employee" class="header">
      <strong><span about="@" property="v-s:firstName"></span> <span about="@" property="v-s:lastName"></span></strong>
    </div>
    <hr class="margin-sm">
    <small rel="v-s:occupation" data-template="v-ui:LabelTemplate"></small>
  </div>
</div>
  """ ;
.
v-s:PositionContactTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения контакта персоны"@ru ;
  rdfs:label "Person contact template"@en ;
  v-ui:forClass v-s:Person ;
  v-ui:template """
<div class="horizontal-card horizontal-card-sm">
  <div class="thumbnail" about="@" rel="v-s:hasImage" data-template="v-ui:ImageTemplate"></div>
  <div class="description">
    <div class="header">
      <strong about="@" property="rdfs:label"></strong>
    </div>
  </div>
</div>
  """ ;
.
v-s:DepartmentContactTemplate
  rdf:type v-ui:ClassTemplate ;
  rdfs:label "Шаблон отображения единицы организационной структуры"@ru ;
  rdfs:label "Organization unit template"@en ;
  v-ui:forClass v-s:Department ;
  v-ui:template """
<div class="horizontal-card horizontal-card-sm">
  <div class="thumbnail">
    <i class="fa fa-folder-open-o fa-2x"></i>
  </div>
  <div class="description">
    <div class="header">
      <strong about="@" property="rdfs:label"></strong>
    </div>
  </div>
</div>
  """ ;
.
