/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct HistoricActivityInstanceApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl HistoricActivityInstanceApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> HistoricActivityInstanceApiClient {
        HistoricActivityInstanceApiClient {
            configuration,
        }
    }
}

pub trait HistoricActivityInstanceApi {
    fn get_historic_activity_instance(&self, id: &str) -> Result<crate::models::HistoricActivityInstanceDto, Error>;
    fn get_historic_activity_instances(&self, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>, activity_instance_id: Option<&str>, process_instance_id: Option<&str>, process_definition_id: Option<&str>, execution_id: Option<&str>, activity_id: Option<&str>, activity_name: Option<&str>, activity_type: Option<&str>, task_assignee: Option<&str>, finished: Option<bool>, unfinished: Option<bool>, canceled: Option<bool>, complete_scope: Option<bool>, started_before: Option<String>, started_after: Option<String>, finished_before: Option<String>, finished_after: Option<String>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>) -> Result<Vec<crate::models::HistoricActivityInstanceDto>, Error>;
    fn get_historic_activity_instances_count(&self, activity_instance_id: Option<&str>, process_instance_id: Option<&str>, process_definition_id: Option<&str>, execution_id: Option<&str>, activity_id: Option<&str>, activity_name: Option<&str>, activity_type: Option<&str>, task_assignee: Option<&str>, finished: Option<bool>, unfinished: Option<bool>, canceled: Option<bool>, complete_scope: Option<bool>, started_before: Option<String>, started_after: Option<String>, finished_before: Option<String>, finished_after: Option<String>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>) -> Result<crate::models::CountResultDto, Error>;
    fn query_historic_activity_instances(&self, first_result: Option<i32>, max_results: Option<i32>, historic_activity_instance_query_dto: Option<crate::models::HistoricActivityInstanceQueryDto>) -> Result<Vec<crate::models::HistoricActivityInstanceDto>, Error>;
    fn query_historic_activity_instances_count(&self, historic_activity_instance_query_dto: Option<crate::models::HistoricActivityInstanceQueryDto>) -> Result<crate::models::CountResultDto, Error>;
}

impl HistoricActivityInstanceApi for HistoricActivityInstanceApiClient {
    fn get_historic_activity_instance(&self, id: &str) -> Result<crate::models::HistoricActivityInstanceDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/history/activity-instance/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_historic_activity_instances(&self, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>, activity_instance_id: Option<&str>, process_instance_id: Option<&str>, process_definition_id: Option<&str>, execution_id: Option<&str>, activity_id: Option<&str>, activity_name: Option<&str>, activity_type: Option<&str>, task_assignee: Option<&str>, finished: Option<bool>, unfinished: Option<bool>, canceled: Option<bool>, complete_scope: Option<bool>, started_before: Option<String>, started_after: Option<String>, finished_before: Option<String>, finished_after: Option<String>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>) -> Result<Vec<crate::models::HistoricActivityInstanceDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/history/activity-instance", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = sort_by {
            req_builder = req_builder.query(&[("sortBy", &s.to_string())]);
        }
        if let Some(ref s) = sort_order {
            req_builder = req_builder.query(&[("sortOrder", &s.to_string())]);
        }
        if let Some(ref s) = first_result {
            req_builder = req_builder.query(&[("firstResult", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref s) = activity_instance_id {
            req_builder = req_builder.query(&[("activityInstanceId", &s.to_string())]);
        }
        if let Some(ref s) = process_instance_id {
            req_builder = req_builder.query(&[("processInstanceId", &s.to_string())]);
        }
        if let Some(ref s) = process_definition_id {
            req_builder = req_builder.query(&[("processDefinitionId", &s.to_string())]);
        }
        if let Some(ref s) = execution_id {
            req_builder = req_builder.query(&[("executionId", &s.to_string())]);
        }
        if let Some(ref s) = activity_id {
            req_builder = req_builder.query(&[("activityId", &s.to_string())]);
        }
        if let Some(ref s) = activity_name {
            req_builder = req_builder.query(&[("activityName", &s.to_string())]);
        }
        if let Some(ref s) = activity_type {
            req_builder = req_builder.query(&[("activityType", &s.to_string())]);
        }
        if let Some(ref s) = task_assignee {
            req_builder = req_builder.query(&[("taskAssignee", &s.to_string())]);
        }
        if let Some(ref s) = finished {
            req_builder = req_builder.query(&[("finished", &s.to_string())]);
        }
        if let Some(ref s) = unfinished {
            req_builder = req_builder.query(&[("unfinished", &s.to_string())]);
        }
        if let Some(ref s) = canceled {
            req_builder = req_builder.query(&[("canceled", &s.to_string())]);
        }
        if let Some(ref s) = complete_scope {
            req_builder = req_builder.query(&[("completeScope", &s.to_string())]);
        }
        if let Some(ref s) = started_before {
            req_builder = req_builder.query(&[("startedBefore", &s.to_string())]);
        }
        if let Some(ref s) = started_after {
            req_builder = req_builder.query(&[("startedAfter", &s.to_string())]);
        }
        if let Some(ref s) = finished_before {
            req_builder = req_builder.query(&[("finishedBefore", &s.to_string())]);
        }
        if let Some(ref s) = finished_after {
            req_builder = req_builder.query(&[("finishedAfter", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id_in {
            req_builder = req_builder.query(&[("tenantIdIn", &s.to_string())]);
        }
        if let Some(ref s) = without_tenant_id {
            req_builder = req_builder.query(&[("withoutTenantId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_historic_activity_instances_count(&self, activity_instance_id: Option<&str>, process_instance_id: Option<&str>, process_definition_id: Option<&str>, execution_id: Option<&str>, activity_id: Option<&str>, activity_name: Option<&str>, activity_type: Option<&str>, task_assignee: Option<&str>, finished: Option<bool>, unfinished: Option<bool>, canceled: Option<bool>, complete_scope: Option<bool>, started_before: Option<String>, started_after: Option<String>, finished_before: Option<String>, finished_after: Option<String>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>) -> Result<crate::models::CountResultDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/history/activity-instance/count", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = activity_instance_id {
            req_builder = req_builder.query(&[("activityInstanceId", &s.to_string())]);
        }
        if let Some(ref s) = process_instance_id {
            req_builder = req_builder.query(&[("processInstanceId", &s.to_string())]);
        }
        if let Some(ref s) = process_definition_id {
            req_builder = req_builder.query(&[("processDefinitionId", &s.to_string())]);
        }
        if let Some(ref s) = execution_id {
            req_builder = req_builder.query(&[("executionId", &s.to_string())]);
        }
        if let Some(ref s) = activity_id {
            req_builder = req_builder.query(&[("activityId", &s.to_string())]);
        }
        if let Some(ref s) = activity_name {
            req_builder = req_builder.query(&[("activityName", &s.to_string())]);
        }
        if let Some(ref s) = activity_type {
            req_builder = req_builder.query(&[("activityType", &s.to_string())]);
        }
        if let Some(ref s) = task_assignee {
            req_builder = req_builder.query(&[("taskAssignee", &s.to_string())]);
        }
        if let Some(ref s) = finished {
            req_builder = req_builder.query(&[("finished", &s.to_string())]);
        }
        if let Some(ref s) = unfinished {
            req_builder = req_builder.query(&[("unfinished", &s.to_string())]);
        }
        if let Some(ref s) = canceled {
            req_builder = req_builder.query(&[("canceled", &s.to_string())]);
        }
        if let Some(ref s) = complete_scope {
            req_builder = req_builder.query(&[("completeScope", &s.to_string())]);
        }
        if let Some(ref s) = started_before {
            req_builder = req_builder.query(&[("startedBefore", &s.to_string())]);
        }
        if let Some(ref s) = started_after {
            req_builder = req_builder.query(&[("startedAfter", &s.to_string())]);
        }
        if let Some(ref s) = finished_before {
            req_builder = req_builder.query(&[("finishedBefore", &s.to_string())]);
        }
        if let Some(ref s) = finished_after {
            req_builder = req_builder.query(&[("finishedAfter", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id_in {
            req_builder = req_builder.query(&[("tenantIdIn", &s.to_string())]);
        }
        if let Some(ref s) = without_tenant_id {
            req_builder = req_builder.query(&[("withoutTenantId", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn query_historic_activity_instances(&self, first_result: Option<i32>, max_results: Option<i32>, historic_activity_instance_query_dto: Option<crate::models::HistoricActivityInstanceQueryDto>) -> Result<Vec<crate::models::HistoricActivityInstanceDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/history/activity-instance", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref s) = first_result {
            req_builder = req_builder.query(&[("firstResult", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&historic_activity_instance_query_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn query_historic_activity_instances_count(&self, historic_activity_instance_query_dto: Option<crate::models::HistoricActivityInstanceQueryDto>) -> Result<crate::models::CountResultDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/history/activity-instance/count", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&historic_activity_instance_query_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
