/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct ProcessDefinitionApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ProcessDefinitionApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ProcessDefinitionApiClient {
        ProcessDefinitionApiClient {
            configuration,
        }
    }
}

pub trait ProcessDefinitionApi {
    fn delete_process_definition(&self, id: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error>;
    fn delete_process_definitions_by_key(&self, key: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error>;
    fn delete_process_definitions_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error>;
    fn get_activity_statistics(&self, id: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error>;
    fn get_activity_statistics_by_process_definition_key(&self, key: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error>;
    fn get_activity_statistics_by_process_definition_key_and_tenant_id(&self, key: &str, tenant_id: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error>;
    fn get_deployed_start_form(&self, id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_deployed_start_form_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error>;
    fn get_deployed_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_latest_process_definition_by_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::ProcessDefinitionDto, Error>;
    fn get_process_definition(&self, id: &str) -> Result<crate::models::ProcessDefinitionDto, Error>;
    fn get_process_definition_bpmn20_xml(&self, id: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error>;
    fn get_process_definition_bpmn20_xml_by_key(&self, key: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error>;
    fn get_process_definition_bpmn20_xml_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error>;
    fn get_process_definition_by_key(&self, key: &str) -> Result<crate::models::ProcessDefinitionDto, Error>;
    fn get_process_definition_diagram(&self, id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_process_definition_diagram_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error>;
    fn get_process_definition_diagram_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_process_definition_statistics(&self, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>, root_incidents: Option<bool>) -> Result<Vec<crate::models::ProcessDefinitionStatisticsResultDto>, Error>;
    fn get_process_definitions(&self, process_definition_id: Option<&str>, process_definition_id_in: Option<&str>, name: Option<&str>, name_like: Option<&str>, deployment_id: Option<&str>, deployed_after: Option<String>, deployed_at: Option<String>, key: Option<&str>, keys_in: Option<&str>, key_like: Option<&str>, category: Option<&str>, category_like: Option<&str>, version: Option<i32>, latest_version: Option<bool>, resource_name: Option<&str>, resource_name_like: Option<&str>, startable_by: Option<&str>, active: Option<bool>, suspended: Option<bool>, incident_id: Option<&str>, incident_type: Option<&str>, incident_message: Option<&str>, incident_message_like: Option<&str>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>, include_process_definitions_without_tenant_id: Option<bool>, version_tag: Option<&str>, version_tag_like: Option<&str>, without_version_tag: Option<bool>, startable_in_tasklist: Option<bool>, not_startable_in_tasklist: Option<bool>, startable_permission_check: Option<bool>, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>) -> Result<Vec<crate::models::ProcessDefinitionDto>, Error>;
    fn get_process_definitions_count(&self, process_definition_id: Option<&str>, process_definition_id_in: Option<&str>, name: Option<&str>, name_like: Option<&str>, deployment_id: Option<&str>, deployed_after: Option<String>, deployed_at: Option<String>, key: Option<&str>, keys_in: Option<&str>, key_like: Option<&str>, category: Option<&str>, category_like: Option<&str>, version: Option<i32>, latest_version: Option<bool>, resource_name: Option<&str>, resource_name_like: Option<&str>, startable_by: Option<&str>, active: Option<bool>, suspended: Option<bool>, incident_id: Option<&str>, incident_type: Option<&str>, incident_message: Option<&str>, incident_message_like: Option<&str>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>, include_process_definitions_without_tenant_id: Option<bool>, version_tag: Option<&str>, version_tag_like: Option<&str>, without_version_tag: Option<bool>, startable_in_tasklist: Option<bool>, not_startable_in_tasklist: Option<bool>, startable_permission_check: Option<bool>) -> Result<crate::models::CountResultDto, Error>;
    fn get_rendered_start_form(&self, id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_rendered_start_form_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error>;
    fn get_rendered_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error>;
    fn get_start_form(&self, id: &str) -> Result<crate::models::FormDto, Error>;
    fn get_start_form_by_key(&self, key: &str) -> Result<crate::models::FormDto, Error>;
    fn get_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::FormDto, Error>;
    fn get_start_form_variables(&self, id: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error>;
    fn get_start_form_variables_by_key(&self, key: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error>;
    fn get_start_form_variables_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error>;
    fn restart_process_instance(&self, id: &str, restart_process_instance_dto: Option<crate::models::RestartProcessInstanceDto>) -> Result<(), Error>;
    fn restart_process_instance_async_operation(&self, id: &str, restart_process_instance_dto: Option<crate::models::RestartProcessInstanceDto>) -> Result<crate::models::BatchDto, Error>;
    fn start_process_instance(&self, id: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error>;
    fn start_process_instance_by_key(&self, key: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error>;
    fn start_process_instance_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error>;
    fn submit_form(&self, id: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error>;
    fn submit_form_by_key(&self, key: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error>;
    fn submit_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error>;
    fn update_history_time_to_live_by_process_definition_id(&self, id: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error>;
    fn update_history_time_to_live_by_process_definition_key(&self, key: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error>;
    fn update_history_time_to_live_by_process_definition_key_and_tenant_id(&self, key: &str, tenant_id: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error>;
    fn update_process_definition_suspension_state(&self, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error>;
    fn update_process_definition_suspension_state_by_id(&self, id: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error>;
    fn update_process_definition_suspension_state_by_key(&self, key: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error>;
    fn update_process_definition_suspension_state_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error>;
}

impl ProcessDefinitionApi for ProcessDefinitionApiClient {
    fn delete_process_definition(&self, id: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = cascade {
            req_builder = req_builder.query(&[("cascade", &s.to_string())]);
        }
        if let Some(ref s) = skip_custom_listeners {
            req_builder = req_builder.query(&[("skipCustomListeners", &s.to_string())]);
        }
        if let Some(ref s) = skip_io_mappings {
            req_builder = req_builder.query(&[("skipIoMappings", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_process_definitions_by_key(&self, key: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = cascade {
            req_builder = req_builder.query(&[("cascade", &s.to_string())]);
        }
        if let Some(ref s) = skip_custom_listeners {
            req_builder = req_builder.query(&[("skipCustomListeners", &s.to_string())]);
        }
        if let Some(ref s) = skip_io_mappings {
            req_builder = req_builder.query(&[("skipIoMappings", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_process_definitions_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, cascade: Option<bool>, skip_custom_listeners: Option<bool>, skip_io_mappings: Option<bool>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref s) = cascade {
            req_builder = req_builder.query(&[("cascade", &s.to_string())]);
        }
        if let Some(ref s) = skip_custom_listeners {
            req_builder = req_builder.query(&[("skipCustomListeners", &s.to_string())]);
        }
        if let Some(ref s) = skip_io_mappings {
            req_builder = req_builder.query(&[("skipIoMappings", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_activity_statistics(&self, id: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/statistics", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = failed_jobs {
            req_builder = req_builder.query(&[("failedJobs", &s.to_string())]);
        }
        if let Some(ref s) = incidents {
            req_builder = req_builder.query(&[("incidents", &s.to_string())]);
        }
        if let Some(ref s) = incidents_for_type {
            req_builder = req_builder.query(&[("incidentsForType", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_activity_statistics_by_process_definition_key(&self, key: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/statistics", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = failed_jobs {
            req_builder = req_builder.query(&[("failedJobs", &s.to_string())]);
        }
        if let Some(ref s) = incidents {
            req_builder = req_builder.query(&[("incidents", &s.to_string())]);
        }
        if let Some(ref s) = incidents_for_type {
            req_builder = req_builder.query(&[("incidentsForType", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_activity_statistics_by_process_definition_key_and_tenant_id(&self, key: &str, tenant_id: &str, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>) -> Result<Vec<crate::models::ActivityStatisticsResultDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/statistics", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = failed_jobs {
            req_builder = req_builder.query(&[("failedJobs", &s.to_string())]);
        }
        if let Some(ref s) = incidents {
            req_builder = req_builder.query(&[("incidents", &s.to_string())]);
        }
        if let Some(ref s) = incidents_for_type {
            req_builder = req_builder.query(&[("incidentsForType", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_deployed_start_form(&self, id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/deployed-start-form", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_deployed_start_form_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/deployed-start-form", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_deployed_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/deployed-start-form", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_latest_process_definition_by_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::ProcessDefinitionDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition(&self, id: &str) -> Result<crate::models::ProcessDefinitionDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_bpmn20_xml(&self, id: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/xml", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_bpmn20_xml_by_key(&self, key: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/xml", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_bpmn20_xml_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::ProcessDefinitionDiagramDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/xml", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_by_key(&self, key: &str) -> Result<crate::models::ProcessDefinitionDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_diagram(&self, id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/diagram", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_diagram_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/diagram", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_diagram_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/diagram", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definition_statistics(&self, failed_jobs: Option<bool>, incidents: Option<bool>, incidents_for_type: Option<&str>, root_incidents: Option<bool>) -> Result<Vec<crate::models::ProcessDefinitionStatisticsResultDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/statistics", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = failed_jobs {
            req_builder = req_builder.query(&[("failedJobs", &s.to_string())]);
        }
        if let Some(ref s) = incidents {
            req_builder = req_builder.query(&[("incidents", &s.to_string())]);
        }
        if let Some(ref s) = incidents_for_type {
            req_builder = req_builder.query(&[("incidentsForType", &s.to_string())]);
        }
        if let Some(ref s) = root_incidents {
            req_builder = req_builder.query(&[("rootIncidents", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definitions(&self, process_definition_id: Option<&str>, process_definition_id_in: Option<&str>, name: Option<&str>, name_like: Option<&str>, deployment_id: Option<&str>, deployed_after: Option<String>, deployed_at: Option<String>, key: Option<&str>, keys_in: Option<&str>, key_like: Option<&str>, category: Option<&str>, category_like: Option<&str>, version: Option<i32>, latest_version: Option<bool>, resource_name: Option<&str>, resource_name_like: Option<&str>, startable_by: Option<&str>, active: Option<bool>, suspended: Option<bool>, incident_id: Option<&str>, incident_type: Option<&str>, incident_message: Option<&str>, incident_message_like: Option<&str>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>, include_process_definitions_without_tenant_id: Option<bool>, version_tag: Option<&str>, version_tag_like: Option<&str>, without_version_tag: Option<bool>, startable_in_tasklist: Option<bool>, not_startable_in_tasklist: Option<bool>, startable_permission_check: Option<bool>, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>) -> Result<Vec<crate::models::ProcessDefinitionDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = process_definition_id {
            req_builder = req_builder.query(&[("processDefinitionId", &s.to_string())]);
        }
        if let Some(ref s) = process_definition_id_in {
            req_builder = req_builder.query(&[("processDefinitionIdIn", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = name_like {
            req_builder = req_builder.query(&[("nameLike", &s.to_string())]);
        }
        if let Some(ref s) = deployment_id {
            req_builder = req_builder.query(&[("deploymentId", &s.to_string())]);
        }
        if let Some(ref s) = deployed_after {
            req_builder = req_builder.query(&[("deployedAfter", &s.to_string())]);
        }
        if let Some(ref s) = deployed_at {
            req_builder = req_builder.query(&[("deployedAt", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref s) = keys_in {
            req_builder = req_builder.query(&[("keysIn", &s.to_string())]);
        }
        if let Some(ref s) = key_like {
            req_builder = req_builder.query(&[("keyLike", &s.to_string())]);
        }
        if let Some(ref s) = category {
            req_builder = req_builder.query(&[("category", &s.to_string())]);
        }
        if let Some(ref s) = category_like {
            req_builder = req_builder.query(&[("categoryLike", &s.to_string())]);
        }
        if let Some(ref s) = version {
            req_builder = req_builder.query(&[("version", &s.to_string())]);
        }
        if let Some(ref s) = latest_version {
            req_builder = req_builder.query(&[("latestVersion", &s.to_string())]);
        }
        if let Some(ref s) = resource_name {
            req_builder = req_builder.query(&[("resourceName", &s.to_string())]);
        }
        if let Some(ref s) = resource_name_like {
            req_builder = req_builder.query(&[("resourceNameLike", &s.to_string())]);
        }
        if let Some(ref s) = startable_by {
            req_builder = req_builder.query(&[("startableBy", &s.to_string())]);
        }
        if let Some(ref s) = active {
            req_builder = req_builder.query(&[("active", &s.to_string())]);
        }
        if let Some(ref s) = suspended {
            req_builder = req_builder.query(&[("suspended", &s.to_string())]);
        }
        if let Some(ref s) = incident_id {
            req_builder = req_builder.query(&[("incidentId", &s.to_string())]);
        }
        if let Some(ref s) = incident_type {
            req_builder = req_builder.query(&[("incidentType", &s.to_string())]);
        }
        if let Some(ref s) = incident_message {
            req_builder = req_builder.query(&[("incidentMessage", &s.to_string())]);
        }
        if let Some(ref s) = incident_message_like {
            req_builder = req_builder.query(&[("incidentMessageLike", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id_in {
            req_builder = req_builder.query(&[("tenantIdIn", &s.to_string())]);
        }
        if let Some(ref s) = without_tenant_id {
            req_builder = req_builder.query(&[("withoutTenantId", &s.to_string())]);
        }
        if let Some(ref s) = include_process_definitions_without_tenant_id {
            req_builder = req_builder.query(&[("includeProcessDefinitionsWithoutTenantId", &s.to_string())]);
        }
        if let Some(ref s) = version_tag {
            req_builder = req_builder.query(&[("versionTag", &s.to_string())]);
        }
        if let Some(ref s) = version_tag_like {
            req_builder = req_builder.query(&[("versionTagLike", &s.to_string())]);
        }
        if let Some(ref s) = without_version_tag {
            req_builder = req_builder.query(&[("withoutVersionTag", &s.to_string())]);
        }
        if let Some(ref s) = startable_in_tasklist {
            req_builder = req_builder.query(&[("startableInTasklist", &s.to_string())]);
        }
        if let Some(ref s) = not_startable_in_tasklist {
            req_builder = req_builder.query(&[("notStartableInTasklist", &s.to_string())]);
        }
        if let Some(ref s) = startable_permission_check {
            req_builder = req_builder.query(&[("startablePermissionCheck", &s.to_string())]);
        }
        if let Some(ref s) = sort_by {
            req_builder = req_builder.query(&[("sortBy", &s.to_string())]);
        }
        if let Some(ref s) = sort_order {
            req_builder = req_builder.query(&[("sortOrder", &s.to_string())]);
        }
        if let Some(ref s) = first_result {
            req_builder = req_builder.query(&[("firstResult", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_process_definitions_count(&self, process_definition_id: Option<&str>, process_definition_id_in: Option<&str>, name: Option<&str>, name_like: Option<&str>, deployment_id: Option<&str>, deployed_after: Option<String>, deployed_at: Option<String>, key: Option<&str>, keys_in: Option<&str>, key_like: Option<&str>, category: Option<&str>, category_like: Option<&str>, version: Option<i32>, latest_version: Option<bool>, resource_name: Option<&str>, resource_name_like: Option<&str>, startable_by: Option<&str>, active: Option<bool>, suspended: Option<bool>, incident_id: Option<&str>, incident_type: Option<&str>, incident_message: Option<&str>, incident_message_like: Option<&str>, tenant_id_in: Option<&str>, without_tenant_id: Option<bool>, include_process_definitions_without_tenant_id: Option<bool>, version_tag: Option<&str>, version_tag_like: Option<&str>, without_version_tag: Option<bool>, startable_in_tasklist: Option<bool>, not_startable_in_tasklist: Option<bool>, startable_permission_check: Option<bool>) -> Result<crate::models::CountResultDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/count", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = process_definition_id {
            req_builder = req_builder.query(&[("processDefinitionId", &s.to_string())]);
        }
        if let Some(ref s) = process_definition_id_in {
            req_builder = req_builder.query(&[("processDefinitionIdIn", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = name_like {
            req_builder = req_builder.query(&[("nameLike", &s.to_string())]);
        }
        if let Some(ref s) = deployment_id {
            req_builder = req_builder.query(&[("deploymentId", &s.to_string())]);
        }
        if let Some(ref s) = deployed_after {
            req_builder = req_builder.query(&[("deployedAfter", &s.to_string())]);
        }
        if let Some(ref s) = deployed_at {
            req_builder = req_builder.query(&[("deployedAt", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref s) = keys_in {
            req_builder = req_builder.query(&[("keysIn", &s.to_string())]);
        }
        if let Some(ref s) = key_like {
            req_builder = req_builder.query(&[("keyLike", &s.to_string())]);
        }
        if let Some(ref s) = category {
            req_builder = req_builder.query(&[("category", &s.to_string())]);
        }
        if let Some(ref s) = category_like {
            req_builder = req_builder.query(&[("categoryLike", &s.to_string())]);
        }
        if let Some(ref s) = version {
            req_builder = req_builder.query(&[("version", &s.to_string())]);
        }
        if let Some(ref s) = latest_version {
            req_builder = req_builder.query(&[("latestVersion", &s.to_string())]);
        }
        if let Some(ref s) = resource_name {
            req_builder = req_builder.query(&[("resourceName", &s.to_string())]);
        }
        if let Some(ref s) = resource_name_like {
            req_builder = req_builder.query(&[("resourceNameLike", &s.to_string())]);
        }
        if let Some(ref s) = startable_by {
            req_builder = req_builder.query(&[("startableBy", &s.to_string())]);
        }
        if let Some(ref s) = active {
            req_builder = req_builder.query(&[("active", &s.to_string())]);
        }
        if let Some(ref s) = suspended {
            req_builder = req_builder.query(&[("suspended", &s.to_string())]);
        }
        if let Some(ref s) = incident_id {
            req_builder = req_builder.query(&[("incidentId", &s.to_string())]);
        }
        if let Some(ref s) = incident_type {
            req_builder = req_builder.query(&[("incidentType", &s.to_string())]);
        }
        if let Some(ref s) = incident_message {
            req_builder = req_builder.query(&[("incidentMessage", &s.to_string())]);
        }
        if let Some(ref s) = incident_message_like {
            req_builder = req_builder.query(&[("incidentMessageLike", &s.to_string())]);
        }
        if let Some(ref s) = tenant_id_in {
            req_builder = req_builder.query(&[("tenantIdIn", &s.to_string())]);
        }
        if let Some(ref s) = without_tenant_id {
            req_builder = req_builder.query(&[("withoutTenantId", &s.to_string())]);
        }
        if let Some(ref s) = include_process_definitions_without_tenant_id {
            req_builder = req_builder.query(&[("includeProcessDefinitionsWithoutTenantId", &s.to_string())]);
        }
        if let Some(ref s) = version_tag {
            req_builder = req_builder.query(&[("versionTag", &s.to_string())]);
        }
        if let Some(ref s) = version_tag_like {
            req_builder = req_builder.query(&[("versionTagLike", &s.to_string())]);
        }
        if let Some(ref s) = without_version_tag {
            req_builder = req_builder.query(&[("withoutVersionTag", &s.to_string())]);
        }
        if let Some(ref s) = startable_in_tasklist {
            req_builder = req_builder.query(&[("startableInTasklist", &s.to_string())]);
        }
        if let Some(ref s) = not_startable_in_tasklist {
            req_builder = req_builder.query(&[("notStartableInTasklist", &s.to_string())]);
        }
        if let Some(ref s) = startable_permission_check {
            req_builder = req_builder.query(&[("startablePermissionCheck", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_rendered_start_form(&self, id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/rendered-form", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_rendered_start_form_by_key(&self, key: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/rendered-form", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_rendered_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<std::path::PathBuf, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/rendered-form", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form(&self, id: &str) -> Result<crate::models::FormDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/startForm", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form_by_key(&self, key: &str) -> Result<crate::models::FormDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/startForm", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str) -> Result<crate::models::FormDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/startForm", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form_variables(&self, id: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/form-variables", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = variable_names {
            req_builder = req_builder.query(&[("variableNames", &s.to_string())]);
        }
        if let Some(ref s) = deserialize_values {
            req_builder = req_builder.query(&[("deserializeValues", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form_variables_by_key(&self, key: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/form-variables", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = variable_names {
            req_builder = req_builder.query(&[("variableNames", &s.to_string())]);
        }
        if let Some(ref s) = deserialize_values {
            req_builder = req_builder.query(&[("deserializeValues", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_start_form_variables_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, variable_names: Option<&str>, deserialize_values: Option<bool>) -> Result<::std::collections::HashMap<String, crate::models::VariableValueDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/form-variables", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = variable_names {
            req_builder = req_builder.query(&[("variableNames", &s.to_string())]);
        }
        if let Some(ref s) = deserialize_values {
            req_builder = req_builder.query(&[("deserializeValues", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn restart_process_instance(&self, id: &str, restart_process_instance_dto: Option<crate::models::RestartProcessInstanceDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/restart", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&restart_process_instance_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn restart_process_instance_async_operation(&self, id: &str, restart_process_instance_dto: Option<crate::models::RestartProcessInstanceDto>) -> Result<crate::models::BatchDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/restart-async", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&restart_process_instance_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn start_process_instance(&self, id: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/start", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn start_process_instance_by_key(&self, key: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/start", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn start_process_instance_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, start_process_instance_dto: Option<crate::models::StartProcessInstanceDto>) -> Result<crate::models::ProcessInstanceWithVariablesDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/start", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn submit_form(&self, id: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/submit-form", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_form_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn submit_form_by_key(&self, key: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/submit-form", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_form_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn submit_form_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, start_process_instance_form_dto: Option<crate::models::StartProcessInstanceFormDto>) -> Result<crate::models::ProcessInstanceDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/submit-form", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&start_process_instance_form_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_history_time_to_live_by_process_definition_id(&self, id: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/history-time-to-live", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&history_time_to_live_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_history_time_to_live_by_process_definition_key(&self, key: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/history-time-to-live", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&history_time_to_live_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_history_time_to_live_by_process_definition_key_and_tenant_id(&self, key: &str, tenant_id: &str, history_time_to_live_dto: Option<crate::models::HistoryTimeToLiveDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/history-time-to-live", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&history_time_to_live_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_process_definition_suspension_state(&self, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/suspended", configuration.base_path);
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&process_definition_suspension_state_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_process_definition_suspension_state_by_id(&self, id: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/{id}/suspended", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&process_definition_suspension_state_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_process_definition_suspension_state_by_key(&self, key: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/suspended", configuration.base_path, key=crate::apis::urlencode(key));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&process_definition_suspension_state_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn update_process_definition_suspension_state_by_key_and_tenant_id(&self, key: &str, tenant_id: &str, process_definition_suspension_state_dto: Option<crate::models::ProcessDefinitionSuspensionStateDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/process-definition/key/{key}/tenant-id/{tenant_id}/suspended", configuration.base_path, key=crate::apis::urlencode(key), tenant_id=crate::apis::urlencode(tenant_id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&process_definition_suspension_state_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

}
