/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct UserApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl UserApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> UserApiClient {
        UserApiClient {
            configuration,
        }
    }
}

pub trait UserApi {
    //fn available_operations(&self, ) -> Result<crate::models::ResourceOptionsDto, Error>;
    //fn available_user_operations(&self, id: &str) -> Result<crate::models::ResourceOptionsDto, Error>;
    fn create_user(&self, user_dto: Option<crate::models::UserDto>) -> Result<(), Error>;
    fn delete_user(&self, id: &str) -> Result<(), Error>;
    fn get_user_count(&self, id: Option<&str>, id_in: Option<&str>, first_name: Option<&str>, first_name_like: Option<&str>, last_name: Option<&str>, last_name_like: Option<&str>, email: Option<&str>, email_like: Option<&str>, member_of_group: Option<&str>, member_of_tenant: Option<&str>, potential_starter: Option<&str>) -> Result<crate::models::CountResultDto, Error>;
    fn get_user_profile(&self, id: &str) -> Result<Vec<crate::models::UserProfileDto>, Error>;
    fn get_users(&self, id: Option<&str>, id_in: Option<&str>, first_name: Option<&str>, first_name_like: Option<&str>, last_name: Option<&str>, last_name_like: Option<&str>, email: Option<&str>, email_like: Option<&str>, member_of_group: Option<&str>, member_of_tenant: Option<&str>, potential_starter: Option<&str>, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>) -> Result<Vec<crate::models::UserProfileDto>, Error>;
    fn unlock_user(&self, id: &str) -> Result<(), Error>;
    //fn update_credentials(&self, id: &str, password: &str, authenticated_user_password: &str, user_credentials_dto: Option<crate::models::UserCredentialsDto>) -> Result<crate::models::AnyType, Error>;
}

impl UserApi for UserApiClient {
/*
    fn available_operations(&self, ) -> Result<crate::models::ResourceOptionsDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user", configuration.base_path);
        let mut req_builder = client.options(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn available_user_operations(&self, id: &str) -> Result<crate::models::ResourceOptionsDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.options(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
*/
    fn create_user(&self, user_dto: Option<crate::models::UserDto>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/create", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&user_dto);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_user(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_user_count(&self, id: Option<&str>, id_in: Option<&str>, first_name: Option<&str>, first_name_like: Option<&str>, last_name: Option<&str>, last_name_like: Option<&str>, email: Option<&str>, email_like: Option<&str>, member_of_group: Option<&str>, member_of_tenant: Option<&str>, potential_starter: Option<&str>) -> Result<crate::models::CountResultDto, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/count", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = id_in {
            req_builder = req_builder.query(&[("idIn", &s.to_string())]);
        }
        if let Some(ref s) = first_name {
            req_builder = req_builder.query(&[("firstName", &s.to_string())]);
        }
        if let Some(ref s) = first_name_like {
            req_builder = req_builder.query(&[("firstNameLike", &s.to_string())]);
        }
        if let Some(ref s) = last_name {
            req_builder = req_builder.query(&[("lastName", &s.to_string())]);
        }
        if let Some(ref s) = last_name_like {
            req_builder = req_builder.query(&[("lastNameLike", &s.to_string())]);
        }
        if let Some(ref s) = email {
            req_builder = req_builder.query(&[("email", &s.to_string())]);
        }
        if let Some(ref s) = email_like {
            req_builder = req_builder.query(&[("emailLike", &s.to_string())]);
        }
        if let Some(ref s) = member_of_group {
            req_builder = req_builder.query(&[("memberOfGroup", &s.to_string())]);
        }
        if let Some(ref s) = member_of_tenant {
            req_builder = req_builder.query(&[("memberOfTenant", &s.to_string())]);
        }
        if let Some(ref s) = potential_starter {
            req_builder = req_builder.query(&[("potentialStarter", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_user_profile(&self, id: &str) -> Result<Vec<crate::models::UserProfileDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{id}/profile", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_users(&self, id: Option<&str>, id_in: Option<&str>, first_name: Option<&str>, first_name_like: Option<&str>, last_name: Option<&str>, last_name_like: Option<&str>, email: Option<&str>, email_like: Option<&str>, member_of_group: Option<&str>, member_of_tenant: Option<&str>, potential_starter: Option<&str>, sort_by: Option<&str>, sort_order: Option<&str>, first_result: Option<i32>, max_results: Option<i32>) -> Result<Vec<crate::models::UserProfileDto>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = id {
            req_builder = req_builder.query(&[("id", &s.to_string())]);
        }
        if let Some(ref s) = id_in {
            req_builder = req_builder.query(&[("idIn", &s.to_string())]);
        }
        if let Some(ref s) = first_name {
            req_builder = req_builder.query(&[("firstName", &s.to_string())]);
        }
        if let Some(ref s) = first_name_like {
            req_builder = req_builder.query(&[("firstNameLike", &s.to_string())]);
        }
        if let Some(ref s) = last_name {
            req_builder = req_builder.query(&[("lastName", &s.to_string())]);
        }
        if let Some(ref s) = last_name_like {
            req_builder = req_builder.query(&[("lastNameLike", &s.to_string())]);
        }
        if let Some(ref s) = email {
            req_builder = req_builder.query(&[("email", &s.to_string())]);
        }
        if let Some(ref s) = email_like {
            req_builder = req_builder.query(&[("emailLike", &s.to_string())]);
        }
        if let Some(ref s) = member_of_group {
            req_builder = req_builder.query(&[("memberOfGroup", &s.to_string())]);
        }
        if let Some(ref s) = member_of_tenant {
            req_builder = req_builder.query(&[("memberOfTenant", &s.to_string())]);
        }
        if let Some(ref s) = potential_starter {
            req_builder = req_builder.query(&[("potentialStarter", &s.to_string())]);
        }
        if let Some(ref s) = sort_by {
            req_builder = req_builder.query(&[("sortBy", &s.to_string())]);
        }
        if let Some(ref s) = sort_order {
            req_builder = req_builder.query(&[("sortOrder", &s.to_string())]);
        }
        if let Some(ref s) = first_result {
            req_builder = req_builder.query(&[("firstResult", &s.to_string())]);
        }
        if let Some(ref s) = max_results {
            req_builder = req_builder.query(&[("maxResults", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn unlock_user(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{id}/unlock", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
/*
    fn update_credentials(&self, id: &str, password: &str, authenticated_user_password: &str, user_credentials_dto: Option<crate::models::UserCredentialsDto>) -> Result<crate::models::AnyType, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/user/{id}/credentials", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        req_builder = req_builder.query(&[("password", &password.to_string())]);
        req_builder = req_builder.query(&[("authenticatedUserPassword", &authenticated_user_password.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&user_credentials_dto);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
*/
}
