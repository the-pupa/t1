/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CorrelationMessageDto {
    /// The name of the message to deliver.
    #[serde(rename = "messageName", skip_serializing_if = "Option::is_none")]
    pub message_name: Option<String>,
    /// Used for correlation of process instances that wait for incoming messages. Will only correlate to executions that belong to a process instance with the provided business key.
    #[serde(rename = "businessKey", skip_serializing_if = "Option::is_none")]
    pub business_key: Option<String>,
    /// Used to correlate the message for a tenant with the given id. Will only correlate to executions and process definitions which belong to the tenant. Must not be supplied in conjunction with a `withoutTenantId`.
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// A Boolean value that indicates whether the message should only be correlated to executions and process definitions which belong to no tenant or not. Value may only be `true`, as `false` is the default behavior. Must not be supplied in conjunction with a `tenantId`.
    #[serde(rename = "withoutTenantId", skip_serializing_if = "Option::is_none")]
    pub without_tenant_id: Option<bool>,
    /// Used to correlate the message to the process instance with the given id.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// Used for correlation of process instances that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against process instance variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
    #[serde(rename = "correlationKeys", skip_serializing_if = "Option::is_none")]
    pub correlation_keys: Option<::std::collections::HashMap<String, crate::models::VariableValueDto>>,
    /// Local variables used for correlation of executions (process instances) that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against local variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
    #[serde(rename = "localCorrelationKeys", skip_serializing_if = "Option::is_none")]
    pub local_correlation_keys: Option<::std::collections::HashMap<String, crate::models::VariableValueDto>>,
    /// A map of variables that is injected into the triggered execution or process instance after the message has been delivered. Each key is a variable name and each value a JSON variable value object with the following properties.
    #[serde(rename = "processVariables", skip_serializing_if = "Option::is_none")]
    pub process_variables: Option<::std::collections::HashMap<String, crate::models::VariableValueDto>>,
    /// A map of local variables that is injected into the triggered execution or process instance after the message has been delivered. Each key is a variable name and each value a JSON variable value object with the following properties.
    #[serde(rename = "processVariablesLocal", skip_serializing_if = "Option::is_none")]
    pub process_variables_local: Option<::std::collections::HashMap<String, crate::models::VariableValueDto>>,
    /// A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities. If the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition). If the value is set to `true`, the message will be correlated to multiple executions and a process definition that can be instantiated by this message in one go.
    #[serde(rename = "all", skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    /// A Boolean value that indicates whether the result of the correlation should be returned or not. If this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the all property, there will be either one ore more returned results in the list.  The default value is `false`, which means no result will be returned.
    #[serde(rename = "resultEnabled", skip_serializing_if = "Option::is_none")]
    pub result_enabled: Option<bool>,
    /// A Boolean value that indicates whether the result of the correlation should contain process variables or not. The parameter resultEnabled should be set to `true` in order to use this it.  The default value is `false`, which means the variables will not be returned.
    #[serde(rename = "variablesInResultEnabled", skip_serializing_if = "Option::is_none")]
    pub variables_in_result_enabled: Option<bool>,
}

impl CorrelationMessageDto {
    pub fn new() -> CorrelationMessageDto {
        CorrelationMessageDto {
            message_name: None,
            business_key: None,
            tenant_id: None,
            without_tenant_id: None,
            process_instance_id: None,
            correlation_keys: None,
            local_correlation_keys: None,
            process_variables: None,
            process_variables_local: None,
            all: None,
            result_enabled: None,
            variables_in_result_enabled: None,
        }
    }
}


