/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeploymentWithDefinitionsDtoAllOf {
    /// A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
    #[serde(rename = "deployedProcessDefinitions", skip_serializing_if = "Option::is_none")]
    pub deployed_process_definitions: Option<::std::collections::HashMap<String, crate::models::ProcessDefinitionDto>>,
    /// A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
    #[serde(rename = "deployedDecisionDefinitions", skip_serializing_if = "Option::is_none")]
    pub deployed_decision_definitions: Option<::std::collections::HashMap<String, crate::models::DecisionDefinitionDto>>,
    /// A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
    #[serde(rename = "deployedDecisionRequirementsDefinitions", skip_serializing_if = "Option::is_none")]
    pub deployed_decision_requirements_definitions: Option<::std::collections::HashMap<String, crate::models::DecisionRequirementsDefinitionDto>>,
    /// A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
    #[serde(rename = "deployedCaseDefinitions", skip_serializing_if = "Option::is_none")]
    pub deployed_case_definitions: Option<::std::collections::HashMap<String, crate::models::CaseDefinitionDto>>,
}

impl DeploymentWithDefinitionsDtoAllOf {
    pub fn new() -> DeploymentWithDefinitionsDtoAllOf {
        DeploymentWithDefinitionsDtoAllOf {
            deployed_process_definitions: None,
            deployed_decision_definitions: None,
            deployed_decision_requirements_definitions: None,
            deployed_case_definitions: None,
        }
    }
}


