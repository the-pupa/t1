/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EventSubscriptionQueryDto : A event subscription query which retrieves a list of event subscriptions



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSubscriptionQueryDto {
    /// The id of the event subscription.
    #[serde(rename = "eventSubscriptionId", skip_serializing_if = "Option::is_none")]
    pub event_subscription_id: Option<String>,
    /// The name of the event this subscription belongs to as defined in the process model.
    #[serde(rename = "eventName", skip_serializing_if = "Option::is_none")]
    pub event_name: Option<String>,
    /// The type of the event subscription.
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<EventType>,
    /// The execution that is subscribed on the referenced event.
    #[serde(rename = "executionId", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// The process instance this subscription belongs to.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// The identifier of the activity that this event subscription belongs to. This could for example be the id of a receive task.
    #[serde(rename = "activityId", skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
    /// Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids.
    #[serde(rename = "tenantIdIn", skip_serializing_if = "Option::is_none")]
    pub tenant_id_in: Option<Vec<String>>,
    /// Only select subscriptions which have no tenant id. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "withoutTenantId", skip_serializing_if = "Option::is_none")]
    pub without_tenant_id: Option<bool>,
    /// Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "includeEventSubscriptionsWithoutTenantId", skip_serializing_if = "Option::is_none")]
    pub include_event_subscriptions_without_tenant_id: Option<bool>,
    /// Apply sorting of the result
    #[serde(rename = "sorting", skip_serializing_if = "Option::is_none")]
    pub sorting: Option<Vec<crate::models::EventSubscriptionQueryDtoSorting>>,
}

impl EventSubscriptionQueryDto {
    /// A event subscription query which retrieves a list of event subscriptions
    pub fn new() -> EventSubscriptionQueryDto {
        EventSubscriptionQueryDto {
            event_subscription_id: None,
            event_name: None,
            event_type: None,
            execution_id: None,
            process_instance_id: None,
            activity_id: None,
            tenant_id_in: None,
            without_tenant_id: None,
            include_event_subscriptions_without_tenant_id: None,
            sorting: None,
        }
    }
}

/// The type of the event subscription.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "message")]
    Message,
    #[serde(rename = "signal")]
    Signal,
    #[serde(rename = "compensate")]
    Compensate,
    #[serde(rename = "conditional")]
    Conditional,
}

