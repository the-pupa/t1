/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FetchExternalTasksDto {
    /// **Mandatory.** The id of the worker on which behalf tasks are fetched. The returned tasks are locked for that worker and can only be completed when providing the same worker id.
    #[serde(rename = "workerId")]
    pub worker_id: String,
    /// **Mandatory.** The maximum number of tasks to return.
    #[serde(rename = "maxTasks")]
    pub max_tasks: Option<i32>,
    /// A `boolean` value, which indicates whether the task should be fetched based on its priority or arbitrarily.
    #[serde(rename = "usePriority", skip_serializing_if = "Option::is_none")]
    pub use_priority: Option<bool>,
    /// The [Long Polling](https://docs.camunda.org/manual/7.14/user-guide/process-engine/external-tasks/#long-polling-to-fetch-and-lock-external-tasks) timeout in milliseconds.  **Note:** The value cannot be set larger than 1.800.000 milliseconds (corresponds to 30 minutes).
    #[serde(rename = "asyncResponseTimeout", skip_serializing_if = "Option::is_none")]
    pub async_response_timeout: Option<i64>,
    /// A JSON array of topic objects for which external tasks should be fetched. The returned tasks may be arbitrarily distributed among these topics. Each topic object has the following properties:
    #[serde(rename = "topics", skip_serializing_if = "Option::is_none")]
    pub topics: Option<Vec<crate::models::FetchExternalTaskTopicDto>>,
}

impl FetchExternalTasksDto {
    pub fn new(worker_id: String, max_tasks: Option<i32>) -> FetchExternalTasksDto {
        FetchExternalTasksDto {
            worker_id,
            max_tasks,
            use_priority: None,
            async_response_timeout: None,
            topics: None,
        }
    }
}


