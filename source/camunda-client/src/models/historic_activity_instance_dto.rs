/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoricActivityInstanceDto {
    /// The id of the activity instance.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the parent activity instance, for example a sub process instance.
    #[serde(rename = "parentActivityInstanceId", skip_serializing_if = "Option::is_none")]
    pub parent_activity_instance_id: Option<String>,
    /// The id of the activity that this object is an instance of.
    #[serde(rename = "activityId", skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
    /// The name of the activity that this object is an instance of.
    #[serde(rename = "activityName", skip_serializing_if = "Option::is_none")]
    pub activity_name: Option<String>,
    /// The type of the activity that this object is an instance of.
    #[serde(rename = "activityType", skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<String>,
    /// The key of the process definition that this activity instance belongs to.
    #[serde(rename = "processDefinitionKey", skip_serializing_if = "Option::is_none")]
    pub process_definition_key: Option<String>,
    /// The id of the process definition that this activity instance belongs to.
    #[serde(rename = "processDefinitionId", skip_serializing_if = "Option::is_none")]
    pub process_definition_id: Option<String>,
    /// The id of the process instance that this activity instance belongs to.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// The id of the execution that executed this activity instance.
    #[serde(rename = "executionId", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// The id of the task that is associated to this activity instance. Is only set if the activity is a user task.
    #[serde(rename = "taskId", skip_serializing_if = "Option::is_none")]
    pub task_id: Option<String>,
    /// The assignee of the task that is associated to this activity instance. Is only set if the activity is a user task.
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<String>,
    /// The id of the called process instance. Is only set if the activity is a call activity and the called instance a process instance.
    #[serde(rename = "calledProcessInstanceId", skip_serializing_if = "Option::is_none")]
    pub called_process_instance_id: Option<String>,
    /// The id of the called case instance. Is only set if the activity is a call activity and the called instance a case instance.
    #[serde(rename = "calledCaseInstanceId", skip_serializing_if = "Option::is_none")]
    pub called_case_instance_id: Option<String>,
    /// The time the instance was started. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// The time the instance ended. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<String>,
    /// The time the instance took to finish (in milliseconds).
    #[serde(rename = "durationInMillis", skip_serializing_if = "Option::is_none")]
    pub duration_in_millis: Option<i32>,
    /// If `true`, this activity instance is canceled.
    #[serde(rename = "canceled", skip_serializing_if = "Option::is_none")]
    pub canceled: Option<bool>,
    /// If `true`, this activity instance did complete a BPMN 2.0 scope.
    #[serde(rename = "completeScope", skip_serializing_if = "Option::is_none")]
    pub complete_scope: Option<bool>,
    /// The tenant id of the activity instance.
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
    /// The time after which the activity instance should be removed by the History Cleanup job. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "removalTime", skip_serializing_if = "Option::is_none")]
    pub removal_time: Option<String>,
    /// The process instance id of the root process instance that initiated the process containing this activity instance.
    #[serde(rename = "rootProcessInstanceId", skip_serializing_if = "Option::is_none")]
    pub root_process_instance_id: Option<String>,
}

impl HistoricActivityInstanceDto {
    pub fn new() -> HistoricActivityInstanceDto {
        HistoricActivityInstanceDto {
            id: None,
            parent_activity_instance_id: None,
            activity_id: None,
            activity_name: None,
            activity_type: None,
            process_definition_key: None,
            process_definition_id: None,
            process_instance_id: None,
            execution_id: None,
            task_id: None,
            assignee: None,
            called_process_instance_id: None,
            called_case_instance_id: None,
            start_time: None,
            end_time: None,
            duration_in_millis: None,
            canceled: None,
            complete_scope: None,
            tenant_id: None,
            removal_time: None,
            root_process_instance_id: None,
        }
    }
}


