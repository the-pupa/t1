/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HistoricActivityInstanceQueryDto : A historic activity instance query which defines a group of historic activity instances



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoricActivityInstanceQueryDto {
    /// Filter by activity instance id.
    #[serde(rename = "activityInstanceId", skip_serializing_if = "Option::is_none")]
    pub activity_instance_id: Option<String>,
    /// Filter by process instance id.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// Filter by process definition id.
    #[serde(rename = "processDefinitionId", skip_serializing_if = "Option::is_none")]
    pub process_definition_id: Option<String>,
    /// Filter by the id of the execution that executed the activity instance.
    #[serde(rename = "executionId", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// Filter by the activity id (according to BPMN 2.0 XML).
    #[serde(rename = "activityId", skip_serializing_if = "Option::is_none")]
    pub activity_id: Option<String>,
    /// Filter by the activity name (according to BPMN 2.0 XML).
    #[serde(rename = "activityName", skip_serializing_if = "Option::is_none")]
    pub activity_name: Option<String>,
    /// Filter by activity type.
    #[serde(rename = "activityType", skip_serializing_if = "Option::is_none")]
    pub activity_type: Option<String>,
    /// Only include activity instances that are user tasks and assigned to a given user.
    #[serde(rename = "taskAssignee", skip_serializing_if = "Option::is_none")]
    pub task_assignee: Option<String>,
    /// Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
    #[serde(rename = "finished", skip_serializing_if = "Option::is_none")]
    pub finished: Option<bool>,
    /// Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
    #[serde(rename = "unfinished", skip_serializing_if = "Option::is_none")]
    pub unfinished: Option<bool>,
    /// Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
    #[serde(rename = "canceled", skip_serializing_if = "Option::is_none")]
    pub canceled: Option<bool>,
    /// Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
    #[serde(rename = "completeScope", skip_serializing_if = "Option::is_none")]
    pub complete_scope: Option<bool>,
    /// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "startedBefore", skip_serializing_if = "Option::is_none")]
    pub started_before: Option<String>,
    /// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "startedAfter", skip_serializing_if = "Option::is_none")]
    pub started_after: Option<String>,
    /// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "finishedBefore", skip_serializing_if = "Option::is_none")]
    pub finished_before: Option<String>,
    /// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "finishedAfter", skip_serializing_if = "Option::is_none")]
    pub finished_after: Option<String>,
    /// Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.
    #[serde(rename = "tenantIdIn", skip_serializing_if = "Option::is_none")]
    pub tenant_id_in: Option<Vec<String>>,
    /// Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "withoutTenantId", skip_serializing_if = "Option::is_none")]
    pub without_tenant_id: Option<bool>,
    /// Apply sorting of the result
    #[serde(rename = "sorting", skip_serializing_if = "Option::is_none")]
    pub sorting: Option<Vec<crate::models::HistoricActivityInstanceQueryDtoSorting>>,
}

impl HistoricActivityInstanceQueryDto {
    /// A historic activity instance query which defines a group of historic activity instances
    pub fn new() -> HistoricActivityInstanceQueryDto {
        HistoricActivityInstanceQueryDto {
            activity_instance_id: None,
            process_instance_id: None,
            process_definition_id: None,
            execution_id: None,
            activity_id: None,
            activity_name: None,
            activity_type: None,
            task_assignee: None,
            finished: None,
            unfinished: None,
            canceled: None,
            complete_scope: None,
            started_before: None,
            started_after: None,
            finished_before: None,
            finished_after: None,
            tenant_id_in: None,
            without_tenant_id: None,
            sorting: None,
        }
    }
}


