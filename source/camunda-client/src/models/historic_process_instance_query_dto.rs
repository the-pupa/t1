/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HistoricProcessInstanceQueryDto : A historic process instance query which defines a group of historic process instances



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HistoricProcessInstanceQueryDto {
    /// Filter by process instance id.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// Filter by process instance ids. Must be a JSON array of `Strings`.
    #[serde(rename = "processInstanceIds", skip_serializing_if = "Option::is_none")]
    pub process_instance_ids: Option<Vec<String>>,
    /// Filter by the process definition the instances run on.
    #[serde(rename = "processDefinitionId", skip_serializing_if = "Option::is_none")]
    pub process_definition_id: Option<String>,
    /// Filter by the key of the process definition the instances run on.
    #[serde(rename = "processDefinitionKey", skip_serializing_if = "Option::is_none")]
    pub process_definition_key: Option<String>,
    /// Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of `Strings`.
    #[serde(rename = "processDefinitionKeyIn", skip_serializing_if = "Option::is_none")]
    pub process_definition_key_in: Option<Vec<String>>,
    /// Filter by the name of the process definition the instances run on.
    #[serde(rename = "processDefinitionName", skip_serializing_if = "Option::is_none")]
    pub process_definition_name: Option<String>,
    /// Filter by process definition names that the parameter is a substring of.
    #[serde(rename = "processDefinitionNameLike", skip_serializing_if = "Option::is_none")]
    pub process_definition_name_like: Option<String>,
    /// Exclude instances that belong to a set of process definitions. Must be a JSON array of `Strings`.
    #[serde(rename = "processDefinitionKeyNotIn", skip_serializing_if = "Option::is_none")]
    pub process_definition_key_not_in: Option<Vec<String>>,
    /// Filter by process instance business key.
    #[serde(rename = "processInstanceBusinessKey", skip_serializing_if = "Option::is_none")]
    pub process_instance_business_key: Option<String>,
    /// Filter by process instance business key that the parameter is a substring of.
    #[serde(rename = "processInstanceBusinessKeyLike", skip_serializing_if = "Option::is_none")]
    pub process_instance_business_key_like: Option<String>,
    /// Restrict the query to all process instances that are top level process instances.
    #[serde(rename = "rootProcessInstances", skip_serializing_if = "Option::is_none")]
    pub root_process_instances: Option<bool>,
    /// Only include finished process instances. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "finished", skip_serializing_if = "Option::is_none")]
    pub finished: Option<bool>,
    /// Only include unfinished process instances. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "unfinished", skip_serializing_if = "Option::is_none")]
    pub unfinished: Option<bool>,
    /// Only include process instances which have an incident. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "withIncidents", skip_serializing_if = "Option::is_none")]
    pub with_incidents: Option<bool>,
    /// Only include process instances which have a root incident. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "withRootIncidents", skip_serializing_if = "Option::is_none")]
    pub with_root_incidents: Option<bool>,
    /// Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
    #[serde(rename = "incidentType", skip_serializing_if = "Option::is_none")]
    pub incident_type: Option<String>,
    /// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
    #[serde(rename = "incidentStatus", skip_serializing_if = "Option::is_none")]
    pub incident_status: Option<IncidentStatus>,
    /// Filter by the incident message. Exact match.
    #[serde(rename = "incidentMessage", skip_serializing_if = "Option::is_none")]
    pub incident_message: Option<String>,
    /// Filter by the incident message that the parameter is a substring of.
    #[serde(rename = "incidentMessageLike", skip_serializing_if = "Option::is_none")]
    pub incident_message_like: Option<String>,
    /// Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "startedBefore", skip_serializing_if = "Option::is_none")]
    pub started_before: Option<String>,
    /// Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "startedAfter", skip_serializing_if = "Option::is_none")]
    pub started_after: Option<String>,
    /// Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "finishedBefore", skip_serializing_if = "Option::is_none")]
    pub finished_before: Option<String>,
    /// Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "finishedAfter", skip_serializing_if = "Option::is_none")]
    pub finished_after: Option<String>,
    /// Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "executedActivityAfter", skip_serializing_if = "Option::is_none")]
    pub executed_activity_after: Option<String>,
    /// Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "executedActivityBefore", skip_serializing_if = "Option::is_none")]
    pub executed_activity_before: Option<String>,
    /// Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "executedJobAfter", skip_serializing_if = "Option::is_none")]
    pub executed_job_after: Option<String>,
    /// Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
    #[serde(rename = "executedJobBefore", skip_serializing_if = "Option::is_none")]
    pub executed_job_before: Option<String>,
    /// Only include process instances that were started by the given user.
    #[serde(rename = "startedBy", skip_serializing_if = "Option::is_none")]
    pub started_by: Option<String>,
    /// Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
    #[serde(rename = "superProcessInstanceId", skip_serializing_if = "Option::is_none")]
    pub super_process_instance_id: Option<String>,
    /// Restrict query to one process instance that has a sub process instance with the given id.
    #[serde(rename = "subProcessInstanceId", skip_serializing_if = "Option::is_none")]
    pub sub_process_instance_id: Option<String>,
    /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
    #[serde(rename = "superCaseInstanceId", skip_serializing_if = "Option::is_none")]
    pub super_case_instance_id: Option<String>,
    /// Restrict query to one process instance that has a sub case instance with the given id.
    #[serde(rename = "subCaseInstanceId", skip_serializing_if = "Option::is_none")]
    pub sub_case_instance_id: Option<String>,
    /// Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
    #[serde(rename = "caseInstanceId", skip_serializing_if = "Option::is_none")]
    pub case_instance_id: Option<String>,
    /// Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of `Strings`
    #[serde(rename = "tenantIdIn", skip_serializing_if = "Option::is_none")]
    pub tenant_id_in: Option<Vec<String>>,
    /// Only include historic process instances which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
    #[serde(rename = "withoutTenantId", skip_serializing_if = "Option::is_none")]
    pub without_tenant_id: Option<bool>,
    /// Restrict to instances that executed an activity with one of given ids. Must be a JSON array of `Strings`
    #[serde(rename = "executedActivityIdIn", skip_serializing_if = "Option::is_none")]
    pub executed_activity_id_in: Option<Vec<String>>,
    /// Restrict to instances that have an active activity with one of given ids. Must be a JSON array of `Strings`
    #[serde(rename = "activeActivityIdIn", skip_serializing_if = "Option::is_none")]
    pub active_activity_id_in: Option<Vec<String>>,
    /// Restrict to instances that are active.
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    /// Restrict to instances that are suspended.
    #[serde(rename = "suspended", skip_serializing_if = "Option::is_none")]
    pub suspended: Option<bool>,
    /// Restrict to instances that are completed.
    #[serde(rename = "completed", skip_serializing_if = "Option::is_none")]
    pub completed: Option<bool>,
    /// Restrict to instances that are externallyTerminated.
    #[serde(rename = "externallyTerminated", skip_serializing_if = "Option::is_none")]
    pub externally_terminated: Option<bool>,
    /// Restrict to instances that are internallyTerminated.
    #[serde(rename = "internallyTerminated", skip_serializing_if = "Option::is_none")]
    pub internally_terminated: Option<bool>,
    /// A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (`String`) is the variable name, `operator` (`String`) is the comparison operator to be used and `value` the variable value.  Value may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. 
    #[serde(rename = "variables", skip_serializing_if = "Option::is_none")]
    pub variables: Option<Vec<crate::models::VariableQueryParameterDto>>,
    /// Match all variable names provided in variables case-insensitively. If set to `true` variableName and variablename are treated as equal.
    #[serde(rename = "variableNamesIgnoreCase", skip_serializing_if = "Option::is_none")]
    pub variable_names_ignore_case: Option<bool>,
    /// Match all variable values provided in variables case-insensitively. If set to `true` variableValue and variablevalue are treated as equal.
    #[serde(rename = "variableValuesIgnoreCase", skip_serializing_if = "Option::is_none")]
    pub variable_values_ignore_case: Option<bool>,
    /// A JSON array of nested historic process instance queries with OR semantics.  A process instance matches a nested query if it fulfills at least one of the query's predicates.  With multiple nested queries, a process instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All process instance query properties can be used except for: `sorting`  See the [User Guide](https://docs.camunda.org/manual/7.14/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
    #[serde(rename = "orQueries", skip_serializing_if = "Option::is_none")]
    pub or_queries: Option<Vec<crate::models::HistoricProcessInstanceQueryDto>>,
    /// Apply sorting of the result
    #[serde(rename = "sorting", skip_serializing_if = "Option::is_none")]
    pub sorting: Option<Vec<crate::models::HistoricProcessInstanceQueryDtoSorting>>,
}

impl HistoricProcessInstanceQueryDto {
    /// A historic process instance query which defines a group of historic process instances
    pub fn new() -> HistoricProcessInstanceQueryDto {
        HistoricProcessInstanceQueryDto {
            process_instance_id: None,
            process_instance_ids: None,
            process_definition_id: None,
            process_definition_key: None,
            process_definition_key_in: None,
            process_definition_name: None,
            process_definition_name_like: None,
            process_definition_key_not_in: None,
            process_instance_business_key: None,
            process_instance_business_key_like: None,
            root_process_instances: None,
            finished: None,
            unfinished: None,
            with_incidents: None,
            with_root_incidents: None,
            incident_type: None,
            incident_status: None,
            incident_message: None,
            incident_message_like: None,
            started_before: None,
            started_after: None,
            finished_before: None,
            finished_after: None,
            executed_activity_after: None,
            executed_activity_before: None,
            executed_job_after: None,
            executed_job_before: None,
            started_by: None,
            super_process_instance_id: None,
            sub_process_instance_id: None,
            super_case_instance_id: None,
            sub_case_instance_id: None,
            case_instance_id: None,
            tenant_id_in: None,
            without_tenant_id: None,
            executed_activity_id_in: None,
            active_activity_id_in: None,
            active: None,
            suspended: None,
            completed: None,
            externally_terminated: None,
            internally_terminated: None,
            variables: None,
            variable_names_ignore_case: None,
            variable_values_ignore_case: None,
            or_queries: None,
            sorting: None,
        }
    }
}

/// Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IncidentStatus {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "resolved")]
    Resolved,
}

