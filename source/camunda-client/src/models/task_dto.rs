/*
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.14.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskDto {
    /// The task id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The task name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The assignee's id.
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<String>,
    /// The owner's id.
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The date the task was created on. [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// The task's due date. [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
    #[serde(rename = "due", skip_serializing_if = "Option::is_none")]
    pub due: Option<String>,
    /// The follow-up date for the task. [Default format](https://docs.camunda.org/manual/7.14/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
    #[serde(rename = "followUp", skip_serializing_if = "Option::is_none")]
    pub follow_up: Option<String>,
    /// The task's delegation state. Possible values are `PENDING` and `RESOLVED`.
    #[serde(rename = "delegationState", skip_serializing_if = "Option::is_none")]
    pub delegation_state: Option<DelegationState>,
    /// The task's description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The id of the execution the task belongs to.
    #[serde(rename = "executionId", skip_serializing_if = "Option::is_none")]
    pub execution_id: Option<String>,
    /// The id the parent task, if this task is a subtask.
    #[serde(rename = "parentTaskId", skip_serializing_if = "Option::is_none")]
    pub parent_task_id: Option<String>,
    /// The task's priority.
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    /// The id of the process definition the task belongs to.
    #[serde(rename = "processDefinitionId", skip_serializing_if = "Option::is_none")]
    pub process_definition_id: Option<String>,
    /// The id of the process instance the task belongs to.
    #[serde(rename = "processInstanceId", skip_serializing_if = "Option::is_none")]
    pub process_instance_id: Option<String>,
    /// The id of the case execution the task belongs to.
    #[serde(rename = "caseExecutionId", skip_serializing_if = "Option::is_none")]
    pub case_execution_id: Option<String>,
    /// The id of the case definition the task belongs to.
    #[serde(rename = "caseDefinitionId", skip_serializing_if = "Option::is_none")]
    pub case_definition_id: Option<String>,
    /// The id of the case instance the task belongs to.
    #[serde(rename = "caseInstanceId", skip_serializing_if = "Option::is_none")]
    pub case_instance_id: Option<String>,
    /// The task's key.
    #[serde(rename = "taskDefinitionKey", skip_serializing_if = "Option::is_none")]
    pub task_definition_key: Option<String>,
    /// Whether the task belongs to a process instance that is suspended.
    #[serde(rename = "suspended", skip_serializing_if = "Option::is_none")]
    pub suspended: Option<bool>,
    /// If not `null`, the form key for the task.
    #[serde(rename = "formKey", skip_serializing_if = "Option::is_none")]
    pub form_key: Option<String>,
    /// If not `null`, the tenant id of the task.
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,
}

impl TaskDto {
    pub fn new() -> TaskDto {
        TaskDto {
            id: None,
            name: None,
            assignee: None,
            owner: None,
            created: None,
            due: None,
            follow_up: None,
            delegation_state: None,
            description: None,
            execution_id: None,
            parent_task_id: None,
            priority: None,
            process_definition_id: None,
            process_instance_id: None,
            case_execution_id: None,
            case_definition_id: None,
            case_instance_id: None,
            task_definition_key: None,
            suspended: None,
            form_key: None,
            tenant_id: None,
        }
    }
}

/// The task's delegation state. Possible values are `PENDING` and `RESOLVED`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DelegationState {
    #[serde(rename = "PENDING")]
    PENDING,
    #[serde(rename = "RESOLVED")]
    RESOLVED,
}

